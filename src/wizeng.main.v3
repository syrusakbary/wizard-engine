// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Parses and runs binary .wasm files.
def main(args: Array<string>) -> int {
	var engine = Engine.new();
	var programArgs: Array<string>;
	var path: string;
	// Parse option and extract module and module arguments
	for (i < args.length) {
		var a = args[i];
		if (a.length > 0 && a[0] == '-') {
			var ok = TraceOptions.parse(a) || EngineOptions.parse(engine, a) || WizengOptions.parse(engine, a);

			if (!ok) return ErrorBuilder.new()
				.puts("wizeng: unrecognized option ")
				.putsq(a)
				.ln()
				.exit(1);
		} else {
			path = a;
			programArgs = Arrays.range(args, i+1, args.length);
			break;
		}
	}

	if (WizengOptions.genintFile != null) {
		var err = Target.genInterpreterIntoFile(WizengOptions.genintFile);
		if (err != null) return err.exit(2);
		if (path == null) return 0; // all done
	}

	if (path == null) return ErrorBuilder.new()
		.puts("wizeng: no input files\n")
		.exit(3);

	if (!Strings.endsWith(path, ".wasm")) return ErrorBuilder.new()
		.puts(path)
		.puts(": unknown file format, expected .wasm\n")
		.exit(4);

	// Parse the binary module
	var result = engine.loadWasmFile(path);
	var module: Module;
	match (result) {
		Ok(m) => module = m;
		FileNotFound => return ErrorBuilder.new()
			.puts("wizeng: could not load file ")
			.puts(path)
			.ln()
			.exit(2);
		ParseError(code, path, section, error_index, error_pos, error_msg) => return ErrorBuilder.new()
			.render(code, path, section, error_index, error_pos, error_msg)
			.exit(3);
	}

	// Compile the list of import processors
	var err = ErrorGen.new(path);
	var imports = Array<Exportable>.new(module.imports.length);
	var i = Instantiator.new(engine.extensions, module, imports, err);
	var map = Strings.newMap<ImportProcessor>();

	for (j < module.imports.length) {
		var name = module.imports[j].imp.module_name;
		if (map[name] == null) {
			var p = HostModuleRegistry.map[name];
			if (p == null) return ErrorBuilder.new()
				.puts(path)
				.put2(": import[%d] from unknown module \"%s\"\n", j, name)
				.exit(7);
			var trace = Trace.moduleFilter != null && Trace.moduleFilter.matchesStr(name, null);
			p.init(programArgs, trace);
			map[name] = p;
			i.processors.put(p);
		}
	}

	// Add tracing to import calls as specified by filters, if any.
	if (Trace.moduleFilter != null) i.binder = ImportTracer.new(Trace.moduleFilter).wrap;

	// Add tracing to the interpreter if necessary.
	if (Trace.interpreter) Execute.probes.add(TraceProbe.new());

	// Compile the module if necessary.
	Execute.finishModule(module, err);

	// Run the instantiatior.
	var instance = i.run();
	if (!err.ok()) return ErrorBuilder.new()
		.render(err.error_code, path, err.section, err.error_index, err.error_pos, err.error_msg)
		.exit(6);

	// Try to find the main entrypoint.
	var entry: (Function, Array<Value>);
	for (j < i.processors.length) {
		var p = i.processors[j];
		if (HostModule.?(p)) {
			entry = HostModule.!(p).getEntry(instance);
			if (entry.0 != null) break;
		}
	}

	if (entry.0 == null) {
		entry = findDefaultMain(instance);
	}

	if (entry.0 == null) return ErrorBuilder.new()
		.puts(path)
		.puts(": no main export from module\n")
		.exit(7);

	// Execute the main entrypoint. (TODO: start function?)
	var r = Execute.call(entry.0, entry.1);
	match (r) {
		Break => ;
		Value(vals) => return if(vals.length == 1, Values.v_i(vals[0]));
		Trap(reason) => {
			var e = ErrorBuilder.new()
				.puts("trap: ")
				.puts(reason.name)
				.ln();
			// TODO: call back into module to render source-level stacktrace
			var call_stack = Execute.getCallStack();
			for (i = call_stack.top - 1; i >= 0; i--) {
				var f = call_stack.elems[i];
				e.puts("\t@ ");
				f.func.render(e);
				e.puts(" +");
				e.putd(f.pc);
				e.ln();
			}
			e.exit(10);
		}
	}
	return 0;
}

// Host modules must be registered by their name so the Wizard engine can find them.
component HostModuleRegistry {
	def map = Strings.newMap<HostModule>();
	def add(m: HostModule) {
		map[m.name] = m;
	}
}
// A host module (with state) that can provide imports to a module as well as the entrypoint and exit value.
class HostModule extends ImportProcessor {
	new(name: string) super(name) { }

	// Initializes the host module with the command-line arguments.
	def init(args: Array<string>, trace: bool) { }
	// Get the main export and arguments, if exported from the instance.
	def getEntry(instance: Instance) -> (Function, Array<Value>) { return (null, null); }
	// De-initialize after running.
	def deinit(result: Result) { }
}
// Wraps imported functions with tracing. Can apply a filter to be selective on which imports to trace.
class ImportTracer(var filter: DeclFilter) {
	def wrap(decl: Decl, ex: Exportable) -> Exportable {
		if (!Function.?(ex)) return ex;
		var func = Function.!(ex);
		var imp = decl.imp;
		if (!filter.matchesStr(imp.module_name, imp.field_name)) return ex;
		var name = Strings.format1("trace(%q)", func.render);
		func = HostFunctionN.new(name, func.sig, traceCall(imp, func, _));
		return func;
	}
	def traceCall(imp: ImportInfo, f: Function, args: Array<Value>) -> HostResult {
		var out = Trace.OUT;
		out.puts(imp.module_name);
		out.putc('.');
		out.puts(imp.field_name);
		Values.renderVals(out, args);
		out.outln();
		if (WasmFunction.?(f)) {
			var result = Execute.call(f, args);
			out.puts("  ==> ");
			result.render(out);
			out.outln();
			match (result) {
				Break => return HostResult.Error("unexpected break");
				Value(vals) => return HostResult.ValueN(vals);
				Trap(reason) => return HostResult.Trap(reason);
			}
		}
		var result: HostResult;
		match (f) {
			hf: HostFunction0 => {
				if (Trace.interpreter) Execute.traceCallHostFunction(hf);
				result = hf.invoke0();
			}
			hf: HostFunction1 => {
				if (Trace.interpreter) Execute.traceCallHostFunction(hf);
				result = hf.invoke1(args[0]);
			}
			hf: HostFunction2 => {
				if (Trace.interpreter) Execute.traceCallHostFunction(hf);
				result = hf.invoke2(args[0], args[1]);
			}
			hf: HostFunction3 => {
				if (Trace.interpreter) Execute.traceCallHostFunction(hf);
				result = hf.invoke3(args[0], args[1], args[2]);
			}
			hf: HostFunctionN => {
				if (Trace.interpreter) Execute.traceCallHostFunction(hf);
				result = hf.invokeN(args);
			}
		}
		out.puts("  ==> ");
		match (result) {
			Value0 => {
			}
			Value1(val) => {
				val.render(out);
			}
			ValueN(vals) => {
				if (vals.length == 1) {
					vals[0].render(out);
				} else {
					Values.renderVals(out, vals);
				}
			}
			Trap(reason) => out.put1("trap %s", reason.name);
			Error(msg) => out.put1("error %s", msg);
			TailCall(func, args) => out.puts("<tailcall>");
		}
		out.outln();
		return result;
	}
}
// XXX: wizeng module
// .force_gc()
// .throw()
// .crash()
// .compile_module()

class TraceProbe extends Probe {
	def tracer = InstrTracer.new();
	def d = DataReader.new([]);

	def fire(func: WasmFunction, offset: int) -> Resumption {
		d.reset(func.decl.code.orig, offset, func.decl.code.orig.length);
		var module = if(func.instance != null, func.instance.module);
		var out = Trace.OUT;
		var len = out.length;
		out.pad(' ', len + Execute.getCallDepth());
		out.putc('+').putd(offset).puts(": ");
		tracer.putInstr(out, module, d);
		out.outln();
		return Resumption.Continue;
	}
}

// Options specific to the "wizeng" executable.
component WizengOptions {
	var genintFile: string; // file to patch interpreter code into

	def parse(engine: Engine, arg: string) -> bool {
		if (Strings.startsWith(arg, "-gen-int=")) {
			genintFile = Arrays.range(arg, 9, arg.length);
			return true;
		}
		return false;
	}
}
def findDefaultMain(instance: Instance) -> (Function, Array<Value>) {
	var module = instance.module;
	var exports = module.exports;
	var found: Function;
	for (j < exports.length) {
		var mex = module.exports[j], iex = instance.exports[j];
		if (!Function.?(iex)) continue;
		found = Function.!(iex);
		if (Strings.equal("main", mex.0)) {
			return (found, Arrays.map(found.sig.params, Values.default));
		}
	}
	return (null, null);
}