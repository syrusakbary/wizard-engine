// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Reusable validator that checks well-formedness of Wasm functions' code.
def OUT = Trace.OUT;
class CodeValidator(extensions: Extension.set, limits: Limits,
		module: Module, err: ErrorGen) {
	def parser = WasmParser.new(extensions, limits, module, err, null);
	def instrTracer = if(Trace.validation, InstrTracer.new());
	def locals = Vector<ValueType>.new();
	def val_stack = ArrayStack<ValueType>.new();
	def ctl_stack = ArrayStack<ControlEntry>.new();
	def ctlxfer = SidetableBuilder.new();
	var ctl_top: ControlEntry;  // FAST: cache of top of control stack
	var func: FuncDecl;
	var sig: SigDecl;
	var opcode_pos: int;

	def validateFunc(f: FuncDecl) -> CodeValidatorResult {
		// XXX: reset decoder instead of allocating a new one
		return validate(f, Decoder.new(f.code.orig, err));
	}
	def validate(f: FuncDecl, d: DataReader) -> CodeValidatorResult {
		func = f;
		sig = f.sig;
		if (Trace.validation) {
			OUT.put2("validate(func #%d: %q)",
				f.func_index, sig.render).outln();
		}
		err.section = BpSection.Code;
		err.index = func.func_index;
		d.atoffset(func.code.abs_start);
		parser.reset(d);
		ctl_stack.clear();
		val_stack.clear();
		ctlxfer.reset(parser.decoder.pos);

		// setup params
		locals.resize(0);
		locals.puta(sig.params);
		// read and initialize locals
		if (!readLocals(locals, false)) return reterr();
		func.code.num_locals = locals.length;

		opcode_pos = parser.decoder.pos;
		pushControl(Opcode.UNREACHABLE.code, sig, 0);
		validateCode();
		if (ctl_stack.top != 0 && err.ok()) {
			// TODO: double-check this error position
			err.rel(d, f.code.abs_start + f.code.orig.length).UnterminatedFunctionBody();
		}
		func.code.sidetable = ctlxfer.extract();
		if (err.ok()) return CodeValidatorResult.Ok;
		return reterr();
	}
	def readLocals(vec: Vector<ValueType>, inLet: bool) -> bool {
		var start = vec.length, max = limits.max_num_locals;
		var dcount = parser.readU32("local decl count", max);
		for (i < dcount) {
			var pt = parser.decoder.pos;
			var count = parser.readU32("local count", max);
			var pt2 = parser.decoder.pos;
			var ltype = parser.readValueType();
			if (!inLet && !ValueTypes.hasDefaultValue(ltype)) {
				err.rel(parser.decoder, pt2).ExpectedTypeWithDefaultValue(ltype);
			}
			if (!err.ok()) return false;
			if (Trace.validation) traceLocals(count, ltype);
			vec.putn(ltype, int.!(count));
			var size = vec.length - start;
			if (size > max) {
				err.rel(parser.decoder, pt).QuantityExceededMaximumI("maximum total locals", size, max);
				return false;
			}
		}
		return true;
	}
	def reterr() -> CodeValidatorResult.Error {
		return CodeValidatorResult.Error(err.error_code, err.error_pos, err.error_msg);
	}
	def traceLocals(count: u32, ltype: ValueType) {
		OUT.put2("  locals %d: %q", count, ltype.render).outln();
	}
	def err_atpc() -> ErrorGen {
		return err.rel(parser.decoder, opcode_pos);
	}
	def validateCode() {
		var d = parser.decoder;
		while (d.pos < d.limit) {
			opcode_pos = parser.decoder.pos;
			var opcode = parser.readByte("opcode", Opcodes.render);
			if (Trace.validation) { traceOpcode(); traceStack(true); }
			// FAST: Handle short operators (predictable direct branch)
			if (Opcodes.attributes[opcode].SHORT_OP) {
				checkSignature(Opcodes.signatures[opcode]);
				if (Trace.validation) traceStack(false);
				continue;
			}
			// Handle all other operators in the switch (indirect branch)
			match (opcode) {
				Opcode.UNREACHABLE.code => {
					setUnreachable();
				}
				Opcode.BLOCK.code => {
					var sig = parser.readBlockType();
					checkArgsAndPushControl(opcode, sig);
				}
				Opcode.LOOP.code => {
					var sig = parser.readBlockType();
					checkArgsAndPushControl(opcode, sig);
					ctl_top.sidetable_pos = ctlxfer.sidetable.length;
					ctl_top.next_pos = parser.decoder.pos;
				}
				Opcode.IF.code => {
					var sig = parser.readBlockType();
					popE(ValueType.I32);
					var ctl = checkArgsAndPushControl(opcode, sig);
					ctlxfer.ref0(ctl, opcode_pos);
					ctl_top.reachable = true; // true block now reachable
				}
				Opcode.ELSE.code => {
					if (ctl_top.start_opcode != Opcode.IF.code) {
						return err_atpc().MismatchedElse();
					}
					checkArgsAndTransfer();
					var if_branch = ctl_top.ctl_refs[0];
					ctl_top.ctl_refs[0] = -1;
					// branches within if-true block go to "else"...
					ctlxfer.bind(ctl_top, opcode_pos, ctlxfer.sidetable.length);
					// ... except false target of "if"
					ctl_top.ctl_refs.put(if_branch);
					ctlxfer.bind(ctl_top, opcode_pos + 1, ctlxfer.sidetable.length + 4);
					// "else" implicitly goes to end
					ctlxfer.ref0(ctl_top, opcode_pos);

					ctl_top.start_opcode = opcode;
					ctl_top.reachable = true;
					val_stack.top = ctl_top.val_stack_top;
					pushTypes(ctl_top.sig.params);
				}
				Opcode.END.code => {
					if (ctl_stack.top == 0) return err_atpc().EmptyControlStack();
					checkArgsAndTransfer();
					var ctl = ctl_stack.peek();
					var next_pos = parser.decoder.pos; // target next bytecode if possible
					if (ctl.start_opcode == Opcode.LOOP.code) {
						ctlxfer.bind(ctl, ctl.next_pos, ctl.sidetable_pos);
					} else if (ctl.start_opcode == Opcode.IF.code) {
						// one-armed if; simulate an empty else clause
						val_stack.top = ctl_top.val_stack_top;
						ctl_top.reachable = true;
						pushTypes(ctl.sig.params);
						checkArgsAndTransfer();
						ctlxfer.bind(ctl, next_pos, ctlxfer.sidetable.length);
					} else if (ctl.start_opcode == Opcode.BLOCK.code) {
						ctlxfer.bind(ctl, next_pos, ctlxfer.sidetable.length);
					} else {
						// the end bytecode of the function must be executed to tear frame down
						ctlxfer.bind(ctl, opcode_pos, ctlxfer.sidetable.length);
					}
					ctl_stack.pop();
					ctl_top = ctl_stack.peek();
				}
				Opcode.BR.code => {
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					ctlxfer.refS(target, opcode_pos, val_stack);
					checkAndPopArgs(labelArgs(target));
					setUnreachable();
				}
				Opcode.BR_IF.code => {
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					popE(ValueType.I32);
					ctlxfer.refS(target, opcode_pos, val_stack);
					var args = labelArgs(target);
					checkAndPopArgs(args);
					pushTypes(args);
				}
				Opcode.BR_TABLE.code => {
					var labels = parser.readLabels();
					popE(ValueType.I32);
					ctlxfer.sidetable.put(labels.length).put(0).put(0).put(0);
					// add refs for all labels and check args
					var arity = -1;
					for (i < labels.length) {
						if (err.error()) return;
						var target = getControl(labels[i]);
						if (target == null) return;
						var args = labelArgs(target);
						if (arity < 0) arity = args.length;
						else if (arity != args.length) err_atpc().BrTableArityMismatch(arity, i, args.length);
						checkTargetArgs(target);
						ctlxfer.refS(target, opcode_pos + i + 1, val_stack);
					}
					setUnreachable();
				}
				Opcode.RETURN.code => {
					checkAndPopArgs(sig.results);
					setUnreachable();
				}
				Opcode.CALL.code => {
					var func = parser.readFuncRef();
					if (func == null) return;
					checkSignature(func.sig);
				}
				Opcode.CALL_INDIRECT.code => {
					var sig = parser.readSigRef();
					var t = parser.readTableImm();
					popE(ValueType.I32);
					if (sig == null) return;
					checkSignature(sig);
				}
				Opcode.RETURN_CALL.code => {
					if (!checkExtension(Extension.TAIL_CALL, opcode)) return;
					var func = parser.readFuncRef();
					if (func == null) return;
					checkAndPopArgs(func.sig.params);
					checkReturnSig(func.sig.results);
					setUnreachable();
				}
				Opcode.RETURN_CALL_INDIRECT.code => {
					if (!checkExtension(Extension.TAIL_CALL, opcode)) return;
					var sig = parser.readSigRef();
					var t = parser.readTableImm();
					popE(ValueType.I32);
					if (sig == null) return;
					checkAndPopArgs(sig.params);
					checkReturnSig(sig.results);
					setUnreachable();
				}
				Opcode.CALL_REF.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var t = popAnyFunc();
					if (t.1) checkSignature(t.0);
				}
				Opcode.RETURN_CALL_REF.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var t = popAnyFunc();
					if (t.1) {
						checkAndPopArgs(t.0.params);
						checkReturnSig(t.0.results);
						setUnreachable();
					}
				}
				Opcode.FUNC_BIND.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var tsig = parser.readSigRef();
					if (tsig == null) return;
					var t = popAnyFunc();
					if (t.1) {
						var fsig = t.0;
						var count = fsig.params.length - tsig.params.length;
						if (count < 0) return err_atpc().ArityMismatchInFuncBind(tsig, fsig);
						for (i < count) {
							var pt = fsig.params[count - i - 1];
							popE(pt);
						}
						var residual = fsig.bindLeft(count);
						if (!residual.isAssignableSig(tsig)) {
							err_atpc().TypeMismatchInFuncBind(tsig, residual);
						}
					}
					push(ValueTypes.RefFunc(false, tsig));
				}
				Opcode.DROP.code => {
					popAny();
				}
				Opcode.SELECT.code => {
					popE(ValueType.I32);
					var t = popAny();
					var rt = t.0;
					if (!ValueTypes.isNumeric(rt)) err_atpc().IllegalSelectType(rt);
					popE(rt);
					push(rt);
				}
				Opcode.SELECT_T.code => {
					var at = parser.readValueTypes("select count", limits.max_num_select_results);
					if (at.length == 0) err_atpc().IllegalSelectCount();
					popE(ValueType.I32);
					checkAndPopArgs(at);
					checkAndPopArgs(at);
					pushTypes(at);
				}
				Opcode.LOCAL_GET.code => {
					var index = parser.readLocalIndex();
					var t = getLocalType(index);
					push(t);
				}
				Opcode.LOCAL_SET.code => {
					var index = parser.readLocalIndex();
					var t = getLocalType(index);
					popE(t);
				}
				Opcode.LOCAL_TEE.code => {
					var index = parser.readLocalIndex();
					var t = getLocalType(index);
					popE(t);
					push(t);
				}
				Opcode.GLOBAL_GET.code => {
					var g = parser.readGlobalRef();
					if (g == null) return;
					push(g.valtype);
				}
				Opcode.GLOBAL_SET.code => {
					var g = parser.readGlobalRef();
					if (g == null) return;
					if (!g.mutable) {
						err_atpc().IllegalAssignmentToImmutableGlobal(g.global_index);
 					}
					popE(g.valtype);
				}
				Opcode.TABLE_GET.code => {
					var table = parser.readTableRef();
					if (table == null) return;
					popE(ValueType.I32);
					push(table.elemtype);
				}
				Opcode.TABLE_SET.code => {
					var table = parser.readTableRef();
					if (table == null) return;
					popE(table.elemtype);
					popE(ValueType.I32);
				}

				Opcode.I32_LOAD8_S.code,
				Opcode.I32_LOAD8_U.code,
				Opcode.I64_LOAD8_S.code,
				Opcode.I64_LOAD8_U.code,
				Opcode.I32_STORE8.code,
				Opcode.I64_STORE8.code => checkAlignment(opcode, 0);

				Opcode.I32_LOAD16_S.code,
				Opcode.I32_LOAD16_U.code,
				Opcode.I64_LOAD16_S.code,
				Opcode.I64_LOAD16_U.code,
				Opcode.I32_STORE16.code,
				Opcode.I64_STORE16.code => checkAlignment(opcode, 1);

				Opcode.I32_LOAD.code,
				Opcode.F32_LOAD.code,
				Opcode.I64_LOAD32_S.code,
				Opcode.I64_LOAD32_U.code,
				Opcode.I32_STORE.code,
				Opcode.F32_STORE.code,
				Opcode.I64_STORE32.code => checkAlignment(opcode, 2);

				Opcode.I64_LOAD.code,
				Opcode.F64_LOAD.code,
				Opcode.I64_STORE.code,
				Opcode.F64_STORE.code => checkAlignment(opcode, 3);

				Opcode.MEMORY_SIZE.code,
				Opcode.MEMORY_GROW.code => {
					var index = parser.readMemoryImm();
					var sig = Opcodes.signatures[opcode];
					checkSignature(sig);
				}
				Opcode.I32_CONST.code => {
					parser.decoder.read_sleb32();
					push(ValueType.I32);
				}
				Opcode.I64_CONST.code => {
					parser.decoder.read_sleb64();
					push(ValueType.I64);
				}
				Opcode.F32_CONST.code => {
					parser.decoder.skipN(4);
					push(ValueType.F32);
				}
				Opcode.F64_CONST.code => {
					parser.decoder.skipN(8);
					push(ValueType.F64);
				}
				Opcode.REF_NULL.code => {
					var t = parser.readRefNullType();
					if (t == ValueTypes.ANYREF) t = ValueType.ANYREF_NULL;
					push(t);
				}
				Opcode.REF_IS_NULL.code => {
					popRef();
					push(ValueType.I32);
				}
				Opcode.REF_FUNC.code => {
					var func = parser.readFuncRef();
					if (func == null) return;
					if (!func.reffed) err_atpc().IllegalFuncRef(func);
					var ftype = if(extensions.FUNCTION_REFERENCES,
						ValueTypes.RefFunc(false, func.sig),
						ValueTypes.FUNCREF);
					push(ftype);
				}
				Opcode.REF_AS_NON_NULL.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var t = popAny();
					if (t.1) push(asNonNullRefType(t.0));
				}
				Opcode.BR_ON_NULL.code,
				Opcode.BR_ON_NON_NULL.code => {
					if (!checkExtension(Extension.FUNCTION_REFERENCES, opcode)) return;
					var depth = parser.readLabel();
					var target = getControl(depth);
					if (target == null) return;
					var t = popAny();
					if (t.1) {
						var rt = t.0, nonnull = asNonNullRefType(rt);
						if (opcode == Opcode.BR_ON_NON_NULL.code) {
							push(nonnull);
							ctlxfer.refS(target, opcode_pos, val_stack);
							checkTargetArgs(target);
							popAny();
						} else {
							ctlxfer.refS(target, opcode_pos, val_stack);
							checkTargetArgs(target);
							push(nonnull);
						}
					}
				}
				Opcode.REF_EQ.code => {
					if (!checkExtension(Extension.GC, opcode)) return;
					popE(ValueTypes.EQREF);
					popE(ValueTypes.EQREF);
					push(ValueType.I32);
				}
				0xFB => {
					var b2 = parser.decoder.read_uleb32();
					if (!checkExtensionP(Extension.GC, opcode, b2)) return;
					match (b2) {
						Opcode.STRUCT_NEW.code => {
							var st = parser.readStructType();
							if (st == null) return;
							checkAndPopFields(st.field_types);
							push(ValueTypes.RefStruct(false, st));
						}
						Opcode.STRUCT_NEW_WITH_RTT.code => {
							var st = parser.readStructType();
							if (st == null) return;
							popRtt2(st);
							checkAndPopFields(st.field_types);
							push(ValueTypes.RefStruct(false, st));
						}
						Opcode.STRUCT_NEW_DEFAULT_WITH_RTT.code => {
							var st = parser.readStructType();
							if (st == null) return;
							var stt = ValueTypes.RefStruct(false, st);
							if (!st.defaultable) err_atpc().ExpectedDefaultableHeapType(stt);
							popRtt2(st);
							push(stt);
						}
						Opcode.STRUCT_GET.code => {
							var st = parser.readStructType();
							var index = parser.readFieldIndex(st);
							if (index < 0) return;
							popE(ValueTypes.RefStruct(true, st));
							var ft = st.field_types[index];
							if (ft.packing != Packedness.UNPACKED) err_atpc().ExpectedUnpackedType(ft);
							push(ft.valtype);
						}
						Opcode.STRUCT_GET_S.code, // fallthrough
						Opcode.STRUCT_GET_U.code => {
							var st = parser.readStructType();
							var index = parser.readFieldIndex(st);
							if (index < 0) return;
							popE(ValueTypes.RefStruct(true, st));
							var ft = st.field_types[index];
							if (ft.packing == Packedness.UNPACKED) err_atpc().ExpectedPackedType(ft);
							push(ft.valtype);
						}
						Opcode.STRUCT_SET.code => {
							var st = parser.readStructType();
							var index = parser.readFieldIndex(st);
							if (index < 0) return;
							var ft = st.field_types[index];
							var stt = ValueTypes.RefStruct(true, st);
							if (!ft.mutable) {
								err_atpc().IllegalAssignmentToImmutableField(stt, u32.view(index));
							}
							popE(ft.valtype);
							popE(stt);
						}
						Opcode.ARRAY_NEW.code => {
							var at = parser.readArrayType();
							if (at == null) return;
							popE(ValueType.I32);
							checkAndPopFields(at.elem_types);
							push(ValueTypes.RefArray(false, at));
						}
						Opcode.ARRAY_NEW_WITH_RTT.code => {
							var at = parser.readArrayType();
							if (at == null) return;
							popRtt2(at);
							popE(ValueType.I32);
							checkAndPopFields(at.elem_types);
							push(ValueTypes.RefArray(false, at));
						}
						Opcode.ARRAY_NEW_DEFAULT_WITH_RTT.code => {
							var at = parser.readArrayType();
							if (at == null) return;
							var att = ValueTypes.RefArray(false, at);
							if (!at.defaultable) err_atpc().ExpectedDefaultableHeapType(att);
							popRtt2(at);
							popE(ValueType.I32);
							push(att);
						}
						Opcode.ARRAY_GET.code => {
							var at = parser.readArrayType();
							if (at == null) return;
							popE(ValueType.I32);
							popE(ValueTypes.RefArray(true, at));
							for (et in at.elem_types) {
								if (et.packing != Packedness.UNPACKED) err_atpc().ExpectedUnpackedType(et);
								push(et.valtype);
							}
						}
						Opcode.ARRAY_GET_S.code, // fallthrough
						Opcode.ARRAY_GET_U.code => {
							var at = parser.readArrayType();
							if (at == null) return;
							popE(ValueType.I32);
							popE(ValueTypes.RefArray(true, at));
							for (et in at.elem_types) {
								if (et.packing == Packedness.UNPACKED) err_atpc().ExpectedPackedType(et);
								push(et.valtype);
							}
						}
						Opcode.ARRAY_SET.code => {
							var at = parser.readArrayType();
							if (at == null) return;
							for (et in at.elem_types) {
								if (!et.mutable) err_atpc().IllegalAssignmentToImmutableArray(ValueType.Ref(true, HeapType.Array(at)));
								popE(et.valtype);
							}
							popE(ValueType.I32);
							popE(ValueTypes.RefArray(true, at));
						}
						Opcode.ARRAY_LEN.code => {
							var ignore = parser.decoder.read_uleb32();
							popE(ValueTypes.ARRAYREF);
							push(ValueType.I32);
						}
						Opcode.ARRAY_NEW_FIXED.code => {
							var at = parser.readArrayType();
							if (at == null) return;
							var size = parser.decoder.read_u32();
							popRtt2(at);
							for (i < size) checkAndPopFields(at.elem_types);
							push(ValueTypes.RefArray(false, at));
						}
						Opcode.ARRAY_NEW_DATA.code => {
							var at = parser.readArrayType();
							if (at == null) return;
							var index = parser.readDataIndex();
							for (et in at.elem_types) {
								if (!ValueTypes.isPrimitive(et.valtype)) err_atpc().IllegalNonPrimitiveArray(at);
							}
							popRtt2(at);
							popE(ValueType.I32);
							popE(ValueType.I32);
							push(ValueTypes.RefArray(false, at));
						}
						Opcode.ARRAY_NEW_ELEM.code => {
							var at = parser.readArrayType();
							if (at == null) return;
							var elem = parser.readElemRef();
							if (elem == null) return;
							if (!ValueTypes.isAssignable(elem.elemtype, at.elem_types[0].valtype)) {
								err_atpc().ElementTypeMismatch(at.elem_types[0].valtype, elem.elemtype);
							}
							popRtt2(at);
							popE(ValueType.I32);
							popE(ValueType.I32);
							push(ValueTypes.RefArray(false, at));
						}
						Opcode.I31_NEW.code => {
							popE(ValueType.I32);
							push(ValueTypes.I31REF_NONNULL);
						}
						Opcode.I31_GET_S.code => {
							popE(ValueTypes.I31REF);
							push(ValueType.I32);
						}
						Opcode.I31_GET_U.code => {
							popE(ValueTypes.I31REF);
							push(ValueType.I32);
						}
						Opcode.RTT_CANON.code => {
							var t1 = parser.readHeapType();
							push(ValueType.Ref(false, HeapType.Rtt(1, t1))); // TODO: hash and lookup canonical RTT
						}
						Opcode.REF_TEST.code => {
							var rtt = popRtt();
							var ref = popRef();
							if (ref.1) checkRttSubtype(ref.0, rtt.0);
							push(ValueType.I32);
						}
						Opcode.REF_CAST.code => {
							var rtt = popRtt();
							var ref = popRef();
							if (ref.1) checkRttSubtype(ref.0, rtt.0);
							push(rttToRefTypeWithOriginalNullability(ref.0, rtt.0));
						}
						Opcode.BR_ON_CAST.code => {
							var depth = parser.readLabel();
							var target = getControl(depth);
							if (target == null) return;
							var rtt = popRtt();
							ctlxfer.refS(target, opcode_pos, val_stack);
							var ref = popRef();
							if (ref.1) checkRttSubtype(ref.0, rtt.0);
							push(ValueTypes.Ref(false, rtt.0.hdecl));
							checkAndPopArgs(labelArgs(target));
							push(ref.0);  // leave original value
						}
						Opcode.BR_ON_CAST_FAIL.code => {
							var depth = parser.readLabel();
							var target = getControl(depth);
							if (target == null) return;
							var rtt = popRtt();
							ctlxfer.refS(target, opcode_pos, val_stack);
							var ref = popRef();
							if (ref.1) checkRttSubtype(ref.0, rtt.0);
							push(ref.0); // leave original value
							checkAndPopArgs(labelArgs(target));
							push(ValueTypes.Ref(false, rtt.0.hdecl));
						}
						Opcode.REF_IS_FUNC.code,
						Opcode.REF_IS_DATA.code,
						Opcode.REF_IS_I31.code,
						Opcode.REF_IS_ARRAY.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							popRef();
							push(ValueType.I32);
						}
						Opcode.REF_AS_FUNC.code => {
							if (!checkExtension(Extension.GC, opcode)) return; // TODO: ref_is_func in function refs?
							popRef();
							push(ValueTypes.FUNCREF);
						}
						Opcode.REF_AS_DATA.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							popRef();
							push(ValueTypes.DATAREF);
						}
						Opcode.REF_AS_I31.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							popRef();
							push(ValueTypes.I31REF);
						}
						Opcode.REF_AS_ARRAY.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							popRef();
							push(ValueTypes.ARRAYREF);
						}
						Opcode.BR_ON_FUNC.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							checkBrOn(ValueTypes.FUNCREF_NONNULL);
						}
						Opcode.BR_ON_DATA.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							checkBrOn(ValueTypes.DATAREF_NONNULL);
						}
						Opcode.BR_ON_I31.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							checkBrOn(ValueTypes.I31REF_NONNULL);
						}
						Opcode.BR_ON_ARRAY.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							checkBrOn(ValueTypes.ARRAYREF_NONNULL);
						}
						Opcode.BR_ON_NON_FUNC.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							checkBrOnNon(ValueTypes.FUNCREF_NONNULL);
						}
						Opcode.BR_ON_NON_DATA.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							checkBrOnNon(ValueTypes.DATAREF_NONNULL);
						}
						Opcode.BR_ON_NON_I31.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							checkBrOnNon(ValueTypes.I31REF_NONNULL);
						}
						Opcode.BR_ON_NON_ARRAY.code => {
							if (!checkExtension(Extension.GC, opcode)) return;
							checkBrOnNon(ValueTypes.ARRAYREF_NONNULL);
						}
						_ => err_atpc().InvalidOpcode(opcode, b2);
					}
				}
				0xFC => {
					var b2 = parser.decoder.read_uleb32();
					match (b2) {
						Opcode.I32_TRUNC_SAT_F32_S.code => checkSignature(Opcode.I32_TRUNC_SAT_F32_S.sig);
						Opcode.I32_TRUNC_SAT_F32_U.code => checkSignature(Opcode.I32_TRUNC_SAT_F32_U.sig);
						Opcode.I32_TRUNC_SAT_F64_S.code => checkSignature(Opcode.I32_TRUNC_SAT_F64_S.sig);
						Opcode.I32_TRUNC_SAT_F64_U.code => checkSignature(Opcode.I32_TRUNC_SAT_F64_U.sig);
						Opcode.I64_TRUNC_SAT_F32_S.code => checkSignature(Opcode.I64_TRUNC_SAT_F32_S.sig);
						Opcode.I64_TRUNC_SAT_F32_U.code => checkSignature(Opcode.I64_TRUNC_SAT_F32_U.sig);
						Opcode.I64_TRUNC_SAT_F64_S.code => checkSignature(Opcode.I64_TRUNC_SAT_F64_S.sig);
						Opcode.I64_TRUNC_SAT_F64_U.code => checkSignature(Opcode.I64_TRUNC_SAT_F64_U.sig);
						Opcode.MEMORY_INIT.code => {
							if (module.explicit_data_count < 0) err_atpc().MissingDataCount();
							var dindex = parser.readDataIndex();
							var mindex = parser.readMemoryIndex();
							checkAndPopArgs(SigCache.arr_iii);
						}
						Opcode.DATA_DROP.code => {
							if (module.explicit_data_count < 0) err_atpc().MissingDataCount();
							var index = parser.readDataIndex();
						}
						Opcode.MEMORY_COPY.code => {
							var dest = parser.readMemoryIndex();
							var src = parser.readMemoryIndex();
							checkAndPopArgs(SigCache.arr_iii);
						}
						Opcode.MEMORY_FILL.code => {
							var index = parser.readMemoryIndex();
							checkAndPopArgs(SigCache.arr_iii);
						}
						Opcode.TABLE_INIT.code => {
							var elem = parser.readElemRef();
							var dst = parser.readTableRef();
							if (dst == null || elem == null) return;
							if (!ValueTypes.isAssignable(elem.elemtype, dst.elemtype)) {
								err_atpc().ElementTypeMismatch(dst.elemtype, elem.elemtype);
							}
							checkAndPopArgs(SigCache.arr_iii);
						}
						Opcode.ELEM_DROP.code => {
							var index = parser.readElemRef();
						}
						Opcode.TABLE_COPY.code => {
							var dst = parser.readTableRef();
							var src = parser.readTableRef();
							if (dst == null || src == null) return;
							if (!ValueTypes.isAssignable(src.elemtype, dst.elemtype)) {
								err_atpc().ElementTypeMismatch(dst.elemtype, src.elemtype);
							}
							checkAndPopArgs(SigCache.arr_iii);
						}
						Opcode.TABLE_GROW.code => {
							var table = parser.readTableRef();
							if (table == null) return;
							popE(ValueType.I32);
							popE(table.elemtype);
							push(ValueType.I32);
						}
						Opcode.TABLE_SIZE.code => {
							var table = parser.readTableRef();
							push(ValueType.I32);
						}
						Opcode.TABLE_FILL.code => {
							var table = parser.readTableRef();
							if (table == null) return;
							popE(ValueType.I32);
							popE(table.elemtype);
							popE(ValueType.I32);
						}
						_ => err_atpc().InvalidOpcode(opcode, b2);
					}
				}
				0xFD => {
					var b2 = parser.decoder.read_uleb32();
					if (b2 >= 256) return err_atpc().InvalidOpcode(opcode, b2);
					var op = Opcodes.page_FD[b2];
					match (op) {
						V128_LOAD_8_SPLAT => checkAlignment2(0);
						V128_LOAD_16_SPLAT => checkAlignment2(1);
						V128_LOAD_32_SPLAT => checkAlignment2(2);
						V128_LOAD_64_SPLAT,
						V128_LOAD_8X8_S,
						V128_LOAD_8X8_U,
						V128_LOAD_16X4_S,
						V128_LOAD_16X4_U,
						V128_LOAD_32_ZERO,
						V128_LOAD_32X2_S,
						V128_LOAD_32X2_U,
						V128_LOAD_64_ZERO => checkAlignment2(3);
						V128_LOAD,
						V128_STORE => checkAlignment2(4);
						V128_LOAD_8_LANE,
						V128_STORE_8_LANE => { checkAlignment2(0); checkLane(15); }
						V128_LOAD_16_LANE,
						V128_STORE_16_LANE => { checkAlignment2(1); checkLane(7); }
						V128_LOAD_32_LANE,
						V128_STORE_32_LANE => { checkAlignment2(2); checkLane(3); }
						V128_LOAD_64_LANE,
						V128_STORE_64_LANE => { checkAlignment2(3);  checkLane(1); }
						V128_CONST,
						I8X16_SHUFFLE => parser.decoder.skipN(16);
						I8X16_EXTRACTLANE_S,
						I8X16_EXTRACTLANE_U,
						I8X16_REPLACELANE => checkLane(15);
						I16X8_EXTRACTLANE_S,
						I16X8_EXTRACTLANE_U,
						I16X8_REPLACELANE => checkLane(7);
						I32X4_EXTRACTLANE,
						I32X4_REPLACELANE,
						F32X4_EXTRACTLANE,
						F32X4_REPLACELANE => checkLane(3);
						I64X2_EXTRACTLANE,
						I64X2_REPLACELANE,
						F64X2_EXTRACTLANE,
						F64X2_REPLACELANE => checkLane(3);

						UNREACHABLE => return err_atpc().InvalidOpcode(opcode, b2);
						_ => ;
					}
					checkSignature(op.sig);
				}
				_ => err_atpc().InvalidOpcode(opcode, parser.decoder.read1());
			}
			if (Trace.validation) traceStack(false);
		}
	}

	def checkRttSubtype(ref: ValueType, rtt: HeapType.Rtt) {
		if (!ValueTypes.isAssignable(ValueTypes.Ref(false, rtt.hdecl), ref)) {
			err_atpc().ExpectedRttSuperType(ref, rtt);
		}
	}
	def rttToRefTypeWithOriginalNullability(ref: ValueType, rtt: HeapType.Rtt) -> ValueType.Ref {
		var nullable = true;
		match (ref) {
			Ref(nnullable, heap) => nullable = nnullable;
			Abstract(abs) => nullable = abs.has_default;
			_ => ;
		}
		return ValueTypes.Ref(nullable, rtt.hdecl);
	}
	def checkBrOn(rt: ValueType) {
		var depth = parser.readLabel();
		var target = getControl(depth);
		if (target == null) return;
		var t = popRef();
		push(rt);   // transfer casted value
		ctlxfer.refS(target, opcode_pos, val_stack);
		checkAndPopArgs(labelArgs(target));
		push(t.0);  // leave original value
	}
	def checkBrOnNon(rt: ValueType) {
		var depth = parser.readLabel();
		var target = getControl(depth);
		if (target == null) return;
		var t = popRef();
		push(t.0);  // transfer original value
		ctlxfer.refS(target, opcode_pos, val_stack);
		checkAndPopArgs(labelArgs(target));
		push(rt); // leave casted value
	}
	def checkSignature(sig: SigDecl) {
		var p = sig.params, r = sig.results;
		if (p.length > 0) checkAndPopArgs(p);
		if (r.length > 0) pushTypes(r);
	}
	def checkExtension(ext: Extension, opcode: byte) -> bool {
		if (extensions != (extensions | ext)) {
			err_atpc().OpcodeRequiresExtension(Opcodes.opcodes[opcode], ext);
			return false;
		}
		return true;
	}
	def checkExtensionP(ext: Extension, prefix: byte, opcode: u32) -> bool {
		if (extensions != (extensions | ext)) {
			err_atpc().OpcodeRequiresExtension(Opcodes.find(prefix, opcode), ext);
			return false;
		}
		return true;
	}
	def setUnreachable() {
		if (ctl_top == null) return;
		ctl_top.reachable = false;
		val_stack.top = ctl_top.val_stack_top;
	}
	def checkAlignment(opcode: byte, max: u32) {
		var memarg = parser.readMemoryArg();
		var align = memarg.0;
		if (align > max) err_atpc().IllegalAlignment(max, align);
		var sig = Opcodes.signatures[opcode];
		checkAndPopArgs(sig.params);
		pushTypes(sig.results);
	}
	def checkAlignment2(max: u32) {
		var memarg = parser.readMemoryArg();
		var align = memarg.0;
		if (align > max) err_atpc().IllegalAlignment(max, align);
	}
	def checkLane(max: u32) {
		var lane = parser.decoder.read1();
		if (lane > max) err_atpc().IllegalLane(max, lane);
	}
	def traceOpcode() {
		OUT.put2("  %x(+%d): ", opcode_pos, opcode_pos - ctlxfer.start_pos);
		var codeptr = parser.decoder;
		var prev = codeptr.pos;
		codeptr.at(opcode_pos);
		instrTracer.putInstr(OUT, module, codeptr);
		codeptr.at(prev);
		OUT.outln();
	}
	def checkTargetArgs(target: ControlEntry) {
		var p = labelArgs(target);
		if (p == null || p.length == 0) return;
		var onStack = val_stack.top - ctl_top.val_stack_top;
		var start = val_stack.top - p.length, missing = p.length - onStack;
		if (missing < 0) missing = 0;
		for (i = p.length - 1; i >= missing; i--) {
			var expected = p[i];
			var t = val_stack.elems[start + i];
			if (!ValueTypes.isAssignable(t, expected)) err_atpc().ExpectedType(expected, t);
		}
		if (missing > 0) {
			if (ctl_top.reachable) return err_atpc().EmptyValueStackExpecting(p[missing - 1]);
		}
	}
	def checkAndPopArgs(p: Array<ValueType>) {
		for (i = p.length - 1; i >= 0; i--) popE(p[i]);
	}
	def checkAndPopFields(p: Array<StorageType>) {
		for (i = p.length - 1; i >= 0; i--) popE(p[i].valtype);
	}
	def checkArgsAndTransfer() {
		var p = ctl_top.sig.results;
		var count = val_stack.top - ctl_top.val_stack_top;
		if (count > p.length || (ctl_top.reachable && count < p.length)) {
			err_atpc().ArityMismatchAtFallthru(p.length, count);
		}
		for (i = p.length - 1; i >= 0; i--) popE(p[i]);
		val_stack.top = ctl_top.val_stack_top;
		val_stack.pusha(p);
	}

	def push(v: ValueType) {
		val_stack.push(v);
	}
	def popE(expected: ValueType) {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) {
				err_atpc().EmptyValueStackExpecting(expected);
			}
			return; // unreachable or already signalled an error
		}
		var t = val_stack.pop();
		if (!ValueTypes.isAssignable(t, expected)) {
			err_atpc().ExpectedType(expected, t);
		}
	}
	def popRtt() -> (HeapType.Rtt, bool) {
		var t = popAny();
		if (t.1) {
			match (t.0) {
				Ref(nullable, heap) => if (HeapType.Rtt.?(heap)) return (HeapType.Rtt.!(heap), true);
				_ => ;
			}
			err_atpc().ExpectedRtt(t.0);
		}
		return (HeapType.Rtt(-1, null), t.1);
	}
	def popRtt2(expected: HeapTypeDecl) -> HeapType.Rtt {
		var t = popAny();
		if (t.1) match (t.0) {
			Ref(nullable, heap) => match (heap) {
				x: HeapType.Rtt => {
					if (nullable) err_atpc().ExpectedRtt2(expected, t.0);
					if (x.hdecl == expected) return x;
				}
				_ => ;
			}
			_ => ;
		}
		err_atpc().ExpectedRtt2(expected, t.0);
		return HeapType.Rtt(-1, null);
	}
	def checkReturnSig(results: Array<ValueType>) {
		var expected = sig.results;
		if (results.length != expected.length) {
			err_atpc().ReturnArityMismatch(expected.length, results.length);
			return;
		}
		for (i < results.length) {
			var t = results[i], e = expected[i];
			if (!ValueTypes.isAssignable(t, e)) {
				err_atpc().ReturnSigMismatch(i, e, t);
			}
		}
	}
	def popAny() -> (ValueType, bool) {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) err_atpc().EmptyValueStack();
			return (ValueType.BOTTOM, false);
		}
		return (val_stack.pop(), true);
	}
	def popAnyFunc() -> (SigDecl, bool) {
		if (val_stack.top <= ctl_top.val_stack_top) {
			if (ctl_top.reachable) err_atpc().EmptyValueStack();
			return (null, false);
		}
		var t = val_stack.pop();
		match (t) {
			Ref(nullable, heap) => match (heap) {
				Func(sig) => return (sig, true);
				_ => ;
			}
			_ => ;
		}
		err_atpc().ExpectedFunctionTypeT(t);
		return (null, false);
	}
	def popRef() -> (ValueType, bool) {
		var t = popAny();
		if (t.1 && !ValueTypes.isRef(t.0)) err_atpc().ExpectedRefType(t.0);
		return t;
	}
	def popNullableRef() -> (bool, ValueType, bool) {
		var t = popAny();
		if (t.1) {
			match (t.0) {
				Ref(nullable, heap) => match(heap) {
					Struct(sdecl) => return (nullable, t.0, t.1);
					Array(array) => return (nullable, t.0, t.1);
					Func(sig) => return (nullable, t.0, t.1);
					_ => ;
				}
				_ => ;
			}
			err_atpc().ExpectedRefType(t.0);
		}
		return (true, t.0, t.1);
	}
	def asNonNullRefType(t: ValueType) -> ValueType {
		match (t) {
			Ref(nullable, heap) => return ValueType.Ref(false, heap);
			_ => err_atpc().ExpectedRefType(t);
		}
		return t;
	}
	def pushTypes(r: Array<ValueType>) {
		val_stack.pusha(r);
	}
	def checkArgsAndPushControl(opcode: byte, sig: SigDecl) -> ControlEntry {
		checkAndPopArgs(sig.params);
		pushTypes(sig.params);
		return pushControl(opcode, sig, val_stack.top - sig.params.length);
	}
	def pushControl(opcode: byte, sig: SigDecl,
			val_stack_top: int) -> ControlEntry {
		var ctl = ctl_stack.next();
		if (ctl != null) { // FAST: reuse previous ControlEntry object
			ctl_stack.top++;
		} else { // allocate and cache new ControlEntry object
			ctl = ControlEntry.new();
			ctl_stack.push(ctl);
		}
		ctl_top = ctl;
		ctl.start_pos = opcode_pos;
		ctl.start_opcode = opcode;
		ctl.sidetable_pos = -1;
		ctl.sig = sig;
		ctl.val_stack_top = val_stack_top;
		ctl.reachable = true;
		ctl.ctl_refs.resize(0);
		return ctl;
	}
	def getControl(depth: u32) -> ControlEntry {
		if (depth >= ctl_stack.top) {
			err_atpc().OobLabel(depth, ctl_stack.top);
			return null;
		}
		var result = ctl_stack.elems[ctl_stack.top - int.!(depth) - 1];
		if (Trace.validation) {
			OUT.put2("    label: depth=%d @+%d", depth, result.start_pos - ctlxfer.start_pos).outln();
		}
		return result;
	}
	def getLocalType(index: u32) -> ValueType {
		if (index < locals.length) return locals[int.view(index)];
		err_atpc().OobLocalIndex(index, locals.length);
		return ValueType.BOTTOM;
	}
	def traceStack(before: bool) {
		if (before) OUT.put1("    stack: %d| ", val_stack.top);
		else        OUT.put1("       ==> %d| ", val_stack.top);

		var start = val_stack.top - 5;
		if (start > 0) OUT.puts("... ");
		else start = 0;
		for (i = start; i < val_stack.top; i++) {
			var e = val_stack.elems[i];
			e.render(OUT);
			OUT.putc(' ');
		}
		OUT.outln();
	}
}
def labelArgs(target: ControlEntry) -> Array<ValueType> {
	if (target.start_opcode == Opcode.LOOP.code) return target.sig.params;
	else return target.sig.results;
}
type CodeValidatorResult {
	case Ok {}
	case Error(error: WasmError, pc: int, msg: string) { }
}

// An entry in the control stack, exposed guts.
class ControlEntry {
	var start_pos: int;
	var next_pos: int;
	var start_opcode: byte;
	var sidetable_pos: int;
	var sig: SigDecl;
	var reachable = true;
	var val_stack_top: int;
	def ctl_refs = Vector<int>.new();
}
// Utility for building the sidetable for a function, which contains control transfer information.
class SidetableBuilder {
	def sidetable = Vector<i32>.new();
	var start_pos: int;
	def reset(start_pos: int) {
		this.start_pos = start_pos;
		this.sidetable.resize(0);
	}
	def ref0(target: ControlEntry, pos: int) {
		refV(target, pos, 0, 0);
	}
	def refS(target: ControlEntry, pos: int, val_stack: ArrayStack<ValueType>) {
		var valcount = labelArgs(target).length;
		var popcount = val_stack.top - valcount - target.val_stack_top;
		refV(target, pos, valcount, u23.view(popcount));
	}
	def refV(target: ControlEntry, pos: int, valcount: int, popcount: int) {
		var pc = rel(pos);
		var xi = sidetable.length;
		if (Trace.validation) {
			OUT.put3("    refV(@+%d (xip=%d) to +%d.label, ", pc, xi, rel(target.start_pos));
			OUT.put2("valcount=%d, popcount=%d)",	valcount, popcount);
			OUT.outln();
		}
		target.ctl_refs.put(xi);
		sidetable.put(pc).put(valcount).put(popcount).put(0);
	}
	def bind(target: ControlEntry, pos: int, sidetable_pos: int) {
		target.sidetable_pos = sidetable_pos;
		var refs = target.ctl_refs, pc = rel(pos);
		for (i = refs.length - 1; i >= 0; i--) {
			var xi = refs[i];
			if (xi < 0) continue; // entry was deleted (if)
			var pos = sidetable[xi];
			var pc_delta = pc - pos;
			sidetable[xi] = pc_delta;
			sidetable[xi + 3] = sidetable_pos - xi;

			if (Trace.validation) {
				OUT.put3("    resolve(@+%d to +%d) (stp_delta=%d)", pos, pc, sidetable_pos - xi);
				OUT.outln();
			}
		}
		refs.resize(0);
	}
	def rel(pos: int) -> int {
		return pos - start_pos;
	}
	def extract() -> Array<int> {
		return if(sidetable.length > 0, sidetable.extract(), NO_SIDETABLE);
	}
}
def NO_SIDETABLE = Array<int>.new(0);
