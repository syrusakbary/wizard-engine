// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Describes the set of architectural registers for a target. There must be < 256.
// By convention, register #0 is reserved for indicated not a register.
class RegSet(regs: Array<Reg>, names: Array<string>) {
	def length = regs.length;
	def pools = Array<RegPool>.new(RegClass.REF.tag + 1);

	def getName(r: Reg) -> string {
		var n = names[r.index];
		if (n == null) {
			if (r.index == 0) return "unalloc";
			return "unknown";
		}
		return n;
	}
}

enum RegClass(code: byte) {
	I32(BpTypeCode.I32.code),
	I64(BpTypeCode.I64.code),
	F32(BpTypeCode.F32.code),
	F64(BpTypeCode.F64.code),
	V128(BpTypeCode.REF.code),
	REF(BpTypeCode.V128.code)
}
type Reg(index: byte) #unboxed { }

// Describes the register configuration for a target in terms of architectural registers.
class RegConfig(regSet: RegSet) {
	var sp_reg: Reg; // XXX: rename reg_xx ?
	var fp_reg: Reg;
	var tls_reg: Reg;
	var spcFrameSize: int;
	
	var vsp_reg: Reg;
	var vfp_reg: Reg;
	var ip_reg: Reg;
	var eip_reg: Reg;
	var stp_reg: Reg;
	var instance_reg: Reg;
	var dispatch_reg: Reg;
	var func_reg: Reg;
	var mem_reg: Reg;
	var tmp_reg: Reg;

	var vsp_offset: int;
	var vfp_offset: int;
	var eip_offset: int;
	var stp_offset: int;
	var instance_offset: int;
	var mem_offset: int;
}

// Registers are allocated from a pool.
class RegPool(regs: Array<Reg>) {
	private def queue = Array<Reg>.new(regs.length);
	private var state: Array<int>;
	private var head: int;

	new() {
		var j = 0, max = int.min;
		for (i < regs.length) {
			var r = regs[i];
			queue[i] = r;
			if (r.index > max) max = r.index;
		}
		state = Array.new(max + 1);
		for (i < state.length) state[i] = -1;
	}

	def alloc(assignment: int) -> Reg {
		if (head >= queue.length) return Reg(0);
		var r = queue[head++];
		state[r.index] = assignment;
		return r;
	}
	def free(r: Reg) {
		if (state[r.index] >= 0) {
			state[r.index] = -1;
			queue[--head] = r;
		}
	}
	def isEmpty() -> bool {
		return head >= queue.length;
	}
	def assignment(r: Reg) -> int {
		return state[r.index];
	}
	def reset() {
		for (i < regs.length) queue[i] = regs[i];
		for (i < state.length) state[i] = -1;
		head = 0;
	}
}
type RegPoolState(reg: Reg, free: bool, prev: byte, next: byte) #unboxed { }
