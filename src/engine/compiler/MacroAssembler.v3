// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

type MasmAddr(base: Reg, offset: int) #unboxed { }
// Abstract codegen interface. Used by all execution tiers (interpreter, single-pass compiler, optimizing compiler)
// as a portable assembler.
// Guide to suffixes (register classes):
//  i = register, 32-bit integer
//  l = register, 64-bit integer or ref
//  f = register, 32-bit float
//  d = register, 64-bit float
//  q = register, 128-bit vector
//  m = memory
class MacroAssembler(valuerep: Tagging, regSet: RegSet, regConfig: RegConfig) {
	// Abstract stack operations
	def slotAddr(slot: u32) -> MasmAddr {
		return MasmAddr(regConfig.vfp_reg, int.view(slot) * valuerep.slot_size + valuerep.tag_size);
	}
	def tagAddr(slot: u32) -> MasmAddr {
		return MasmAddr(regConfig.vfp_reg, int.view(slot) * valuerep.slot_size);
	}

	// XXX: remove emit_ prefix?
	def emit_mov_r_s(reg: Reg, regClass: RegClass, slot: u32) { // utility method
		emit_mov_r_m(reg, regClass, slotAddr(slot));
	}

	def emit_mov_s_r(slot: u32, reg: Reg, regClass: RegClass) { // utility method
		emit_mov_m_r(slotAddr(slot), reg, regClass);
	}
	def emit_mov_s_i(slot: u32, val: int) { // utility method
		emit_mov_m_i(slotAddr(slot), val);
	}
	def emit_mov_s_l(slot: u32, val: long) { // utility method
		emit_mov_m_l(slotAddr(slot), val);
	}
	def emit_mov_s_f(slot: u32, bits: u32) { // utility method
		emit_mov_m_f(slotAddr(slot), bits);
	}
	def emit_mov_s_d(slot: u32, bits: u64) { // utility method
		emit_mov_m_d(slotAddr(slot), bits);
	}
	def emit_mov_s_q(slot: u32, low: u64, high: u64) {
		emit_mov_m_q(slotAddr(slot), low, high);
	}

	def emit_add_r_l(reg: Reg, val: int) { // utility method
		if (val != 0) emit_binop_r_i(Opcode.I64_ADD, reg, val);
	}
	def emit_sub_r_l(reg: Reg, val: int) { // utility method
		if (val != 0) emit_binop_r_i(Opcode.I64_SUB, reg, val);
	}

	def emit_mov_s_s(dest: u32, src: u32); // move slot to slot, including tag

	// Architecture-specific
	def emit_mov_r_r(reg: Reg, reg2: Reg);
	def emit_mov_r_m(reg: Reg, regClass: RegClass, addr: MasmAddr);
	def emit_mov_r_i(reg: Reg, val: int);
	def emit_mov_r_l(reg: Reg, val: long);
	def emit_mov_r_f(reg: Reg, bits: u32);
	def emit_mov_r_d(reg: Reg, bits: u64);
	def emit_mov_r_q(reg: Reg, low: u64, high: u64);

	def emit_mov_m_r(addr: MasmAddr, reg: Reg, regClass: RegClass);
	def emit_mov_m_i(addr: MasmAddr, val: int);
	def emit_mov_m_l(addr: MasmAddr, val: long);
	def emit_mov_m_f(addr: MasmAddr, bits: u32);
	def emit_mov_m_d(addr: MasmAddr, bits: u64);
	def emit_mov_m_q(addr: MasmAddr, low: u64, high: u64);

	def emit_binop_r_r(op: Opcode, reg: Reg, reg2: Reg);
	def emit_binop_r_m(op: Opcode, reg: Reg, addr: MasmAddr);
	def emit_binop_r_i(op: Opcode, reg: Reg, val: int);

	def emit_ret();
	def emit_nop();
}

