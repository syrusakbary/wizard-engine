// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

var config_TrackFloatZeroConst = false;
def INITIAL = 16;
def OUT = Trace.OUT;
var offsets: V3Offsets;

def getOffsets() -> V3Offsets {
	if (offsets == null) offsets = V3Offsets.new();
	return offsets;
}

// Compiles Wasm bytecode to machine code in a single pass via a MacroAssembler.
class SinglePassCompiler(masm: MacroAssembler, extensions: Extension.set, limits: Limits, module: Module) {
	def err = ErrorGen.new(module.name);
	def codeptr = Decoder.new(null, err);
	def parser = WasmParser.new(extensions, limits, module, err, codeptr);
	def instrTracer = if(Trace.compiler, InstrTracer.new());
	
	// Abstract state of the value stack
	var val_state = Array<SpcState>.new(INITIAL);	// uncached, in a register, or a constant
	var val_tagged = Array<bool>.new(INITIAL);	// tag is written properly into memory
	var val_stored = Array<bool>.new(INITIAL);	// value is written into memory
	var val_tag = Array<RegClass>.new(INITIAL);	// type of the slot
	var val_sp: u32;
	var sig: SigDecl;
	var start_pos: int;
	var opcode_pos: int;
	var success = true;

	def gen(func: FuncDecl) -> bool {
		var d = codeptr.reset(func.code.code, 0, func.code.code.length);

		start_pos = 0;
		sig = func.sig;

		// initialize internal state
		initParams(sig.params);
		initLocals();

		// emit prologue
		emitPrologue();

		// emit instructions
//TODO		pushControl(Opcode.UNREACHABLE.code, sig, 0);
		success = true;
		while (d.pos < d.limit) {
			emitInstr();
		}
		return success;
	}
	def emitPrologue() {
		var c = masm.regConfig, offsets = getOffsets();
		// Allocate stack frame
		masm.emit_sub_r_l(c.sp_reg, c.spcFrameSize);

		// Spill VSP
		masm.emit_mov_m_r(MasmAddr(c.sp_reg, c.vsp_offset), c.vsp_reg, RegClass.REF); // XXX: track VSP-spilled state
		// Load wf.instance and spill
		masm.emit_mov_r_m(c.instance_reg, RegClass.REF, MasmAddr(c.tmp_reg, offsets.WasmFunction_instance));
		masm.emit_mov_m_r(MasmAddr(c.sp_reg, c.instance_offset), c.instance_reg, RegClass.REF);
		// Load wf.decl and spill
		masm.emit_mov_r_m(c.func_reg, RegClass.REF, MasmAddr(c.tmp_reg, offsets.WasmFunction_decl));
		masm.emit_mov_m_r(MasmAddr(c.sp_reg, c.instance_offset), c.func_reg, RegClass.REF);
		// spill 0 for EIP, STP
		masm.emit_mov_m_l(MasmAddr(c.sp_reg, c.eip_offset), 0);
		masm.emit_mov_m_l(MasmAddr(c.sp_reg, c.stp_offset), 0);

		// Compute VFP = VSP - sig.params.length * SLOT_SIZE
		masm.emit_mov_r_r(c.vfp_reg, c.vsp_reg); // XXX: use 3-addr adjustment of VFP
		masm.emit_sub_r_l(c.vfp_reg, sig.params.length * masm.valuerep.slot_size);

		// Load instance.memories[0].start into MEM0_BASE and spill
		if (module.memories.length > 0) {
			masm.emit_mov_r_m(c.mem_reg, RegClass.REF, MasmAddr(c.instance_reg, offsets.Instance_memories));
			masm.emit_mov_r_m(c.mem_reg, RegClass.REF, MasmAddr(c.mem_reg, offsets.Array_contents));
			masm.emit_mov_m_r(MasmAddr(c.sp_reg, c.mem_offset), c.mem_reg, RegClass.REF);
		} else {
			masm.emit_mov_m_l(MasmAddr(c.sp_reg, c.mem_offset), 0);
		}
	}
	def initParams(params: Array<ValueType>) {
		if (val_state.length < params.length) val_state = Array.new(params.length + 32);
		for (i < params.length) {
			val_state[i] = SpcState.Uncached;
			val_tagged[i] = true;
			val_stored[i] = true;
			val_tag[i] = toTag(params[i]);
		}
		val_sp = u32.view(params.length);
	}
	def initLocals() {
		var max = limits.max_num_locals;
		var dcount = parser.readU32("local decl count", max);
		for (i < dcount) {
			var count = parser.readU32("local count", max);
			var ltype = parser.readValueType();
			var nlength = val_sp + count;
			if (nlength > val_state.length) grow(int.view(nlength + val_sp * 2));
			for (j < count) {
				var k = j + val_sp;
				val_state[k] = SpcState.Const(0); // TODO: use default
				val_tagged[k] = false;
				val_stored[k] = false;
				val_tag[k] = toTag(ltype);
			}
			val_sp = nlength;
		}
	}
	def toTag(vt: ValueType) -> RegClass {
		match (vt) {
			I32 => return RegClass.I32;
			I64 => return RegClass.I64;
			F32 => return RegClass.F32;
			F64 => return RegClass.F64;
			V128 => return RegClass.V128;
			_ => return RegClass.REF;
		}
	}
	def emitInstr() {
		opcode_pos = codeptr.pos;
		var opcode = codeptr.read1();
		if (Trace.compiler) { traceOpcode(); traceStack(); }
		match (opcode) {
			Opcode.LOCAL_GET.code => {
				var index = codeptr.read_uleb32();
				var state = val_state[index];
				var tag = val_tag[index];
				match (state) {
					Uncached => { // alloc reg and load
						var reg = allocReg(tag);
						emit_read_slot_r(index, reg);
						push(tag, SpcState.Register(reg));
					}
					Register(reg) => { // store + steal reg
						if (!val_stored[index]) {
							emit_write_slot_r(index, reg);
							val_stored[index] = true;
						}
						val_state[index] = SpcState.Uncached;
						push(tag, state);
					}
					Const(val) => { // copy constant state
						push(tag, state);
					}
				}
			}
			Opcode.LOCAL_SET.code => {
				var index = codeptr.read_uleb32();
				var t = pop(), tag = t.1, state = t.2;
				match (state) {
					Uncached => { // alloc reg and load
						var reg = allocReg(tag);
						emit_read_slot_r(val_sp, reg);
						val_state[index] = SpcState.Register(reg);
						val_stored[index] = false;
					}
					Register(reg) => { // steal reg
						val_state[index] = state;
						val_stored[index] = false;
					}
					Const(val) => { // copy constant state
						val_state[index] = state;
						val_stored[index] = false;
					}
				}
			}
			Opcode.LOCAL_TEE.code => {
				var index = codeptr.read_uleb32();
				var tos = val_sp - 1;
				var t = peek(), tag = t.1, state = t.2;
				match (state) {
					Uncached => { // alloc reg, load, write
						var reg = allocReg(tag);
						emit_read_slot_r(tos, reg);
						emit_write_slot_r(index, reg);
						val_state[index] = SpcState.Uncached;
						val_stored[index] = true;
						val_state[tos] = SpcState.Register(reg);
					}
					Register(reg) => { // simply write local
						emit_write_slot_r(index, reg);
						val_state[index] = SpcState.Uncached;
						val_stored[index] = true;
					}
					Const(val) => { // copy constant state
						val_state[index] = state;
						val_stored[index] = false;
					}
				}
			}
			Opcode.I32_CONST.code => {
				var val = codeptr.read_sleb32();
				push(RegClass.I32, SpcState.Const(val));
			}
			Opcode.I64_CONST.code => {
				var val = codeptr.read_sleb64();
				if (i32.view(val) == val) {
					push(RegClass.I64, SpcState.Const(i32.view(val)));
				} else {
					var reg = allocReg(RegClass.I64);
					push(RegClass.I64, SpcState.Register(reg));
					emit_write_tag_tos(RegClass.I64);
					masm.emit_mov_r_l(reg.reg, val);
				}
			}
			Opcode.F32_CONST.code => {
				var val = codeptr.read_u32();
				if (val == 0 && config_TrackFloatZeroConst) {
					push(RegClass.F32, SpcState.Const(0));
				} else {
					var reg = allocReg(RegClass.F32);
					push(RegClass.F32, SpcState.Register(reg));
					emit_write_tag_tos(RegClass.F32);
					masm.emit_mov_r_f(reg.reg, val);
				}
			}
			Opcode.F64_CONST.code => {
				var val = codeptr.read_u64();
				if (val == 0 && config_TrackFloatZeroConst) {
					push(RegClass.F64, SpcState.Const(0));
				} else {
					var reg = allocReg(RegClass.F64);
					push(RegClass.F64, SpcState.Register(reg));
					emit_write_tag_tos(RegClass.F64);
					masm.emit_mov_r_d(reg.reg, val);
				}
			}
			Opcode.I32_ADD.code => emitCommutable(Opcode.I32_ADD, isZero, int.+);
			Opcode.I32_SUB.code => emitBinopNoCommute(Opcode.I32_SUB, isZero, int.-);
			Opcode.I32_MUL.code => emitCommutable(Opcode.I32_MUL, isOne, int.*);
			Opcode.I32_DIV_S.code => emitBinopNoFold(Opcode.I32_DIV_S, isOne);
			Opcode.I32_DIV_U.code => emitBinopNoFold(Opcode.I32_DIV_U, isOne);
			Opcode.I32_REM_S.code => emitBinopNoFold(Opcode.I32_REM_S, isAlwaysFalse);
			Opcode.I32_REM_U.code => emitBinopNoFold(Opcode.I32_REM_U, isAlwaysFalse); // XXX: rem by max int
			Opcode.I32_AND.code => emitCommutable(Opcode.I32_AND, isMinusOne, int.&);
			Opcode.I32_XOR.code => emitCommutable(Opcode.I32_XOR, isZero, int.^);
			Opcode.I32_OR.code => emitCommutable(Opcode.I32_OR, isZero, int.|);
			Opcode.I32_SHL.code => emitCommutable(Opcode.I32_SHL, isZero, Execute.I32_SHL);
			Opcode.I32_SHR_S.code => emitCommutable(Opcode.I32_SHR_S, isZero, Execute.I32_SHR_S);
			Opcode.I32_SHR_U.code => emitCommutable(Opcode.I32_SHR_U, isZero, Execute.I32_SHR_U);
			Opcode.I32_ROTL.code => emitCommutable(Opcode.I32_ROTL, isZero, I32_ROTL);
			Opcode.I32_ROTR.code => emitCommutable(Opcode.I32_ROTR, isZero, I32_ROTR);
			Opcode.END.code => {
				if (codeptr.pos == codeptr.limit) emitReturn();
				else unsupported();
			}
			Opcode.RETURN.code => emitReturn();
			_ => unsupported();
		}
	}
	def emitReturn() {
		// XXX: emit only one copy of the epilogue
		var c = masm.regConfig;
		var len = sig.results.length;
		// Copy values back to VSP
		for (i = len - 1; i >= 0; i--) {
			var index = u32.view(i);
			var t = pop(), tag = t.1, state = t.2;
			var slot = masm.slotAddr(index);
			match (state) {
				Uncached => { // alloc reg, load, store
					var reg = allocReg(tag);
					emit_read_slot_r(val_sp, reg);
					masm.emit_mov_m_r(slot, reg.reg, reg.regClass);
				}
				Register(reg) => { // store
					masm.emit_mov_m_r(slot, reg.reg, reg.regClass);
				}
				Const(val) => { // store immediate
					masm.emit_mov_m_l(slot, val);
				}
			}
			// Update the slot's tag byte if necessary
			var rtag = toTag(sig.results[i]);
			if (masm.valuerep.tagged && !val_tagged[i] || val_tag[i] != rtag) {
				masm.emit_mov_m_i(masm.tagAddr(index), rtag.code);
			}
		}
		// Compute VSP = VFP + sig.resultslength
		masm.emit_mov_r_r(c.vsp_reg, c.vfp_reg); // XXX: use 3-addr adjustment of VSP
		masm.emit_add_r_l(c.vsp_reg, sig.results.length * masm.valuerep.slot_size);
		// Deallocate stack frame
		masm.emit_add_r_l(c.sp_reg, c.spcFrameSize);
		// Return to caller
		masm.emit_ret();
	}
	def emitBinopNoFold(op: Opcode, nop: int -> bool) { // XXX: factor commonality among binops
		var b = pop();
		var a = peek();
		var tos = u32.!(val_sp - 1);
		match (a.2) {
			Uncached => match (b.2) {
				Uncached => {
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos, reg_a);
					masm.emit_binop_r_m(op, reg_a.reg, masm.slotAddr(tos+1));
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
				Register(reg_b) => {
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos, reg_a);
					masm.emit_binop_r_r(op, reg_a.reg, reg_b.reg);
					val_state[tos] = SpcState.Register(reg_a);
					freeReg(reg_b);
					val_stored[tos] = false;
				}
				Const(val_b) => {
					if (nop(val_b)) return;
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos, reg_a);
					masm.emit_binop_r_i(op, reg_a.reg, val_b);
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
			}
			Register(reg_a) => match (b.2) {
				Uncached => {
					masm.emit_binop_r_m(op, reg_a.reg, masm.slotAddr(tos+1));
					val_stored[tos] = false;
				}
				Register(reg_b) => {
					masm.emit_binop_r_r(op, reg_a.reg, reg_b.reg);
					freeReg(reg_b);
					val_stored[tos] = false;
				}
				Const(val_b) => {
					if (nop(val_b)) return;
					masm.emit_binop_r_i(op, reg_a.reg, val_b);
					val_stored[tos] = false;
				}
			}
			Const(val_a) => if (!nop(val_a)) match (b.2) {
				Uncached => {
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos+1, reg_a);
					masm.emit_binop_r_i(op, reg_a.reg, val_a);
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
				Register(reg_b) => {
					var reg_a = allocReg(RegClass.I32);
					masm.emit_mov_r_i(reg_a.reg, val_a);
					masm.emit_binop_r_r(op, reg_a.reg, reg_b.reg);
					freeReg(reg_b);
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
				Const(val_b) => {
					var reg_a = allocReg(RegClass.I32);
					masm.emit_mov_r_i(reg_a.reg, val_a);
					masm.emit_binop_r_i(op, reg_a.reg, val_b);
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
			}
		}
	}
	def emitBinopNoCommute(op: Opcode, nop: int -> bool, fold: (int, int) -> int) {
		var b = pop();
		var a = peek();
		var tos = u32.!(val_sp - 1);
		match (a.2) {
			Uncached => match (b.2) {
				Uncached => {
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos, reg_a);
					masm.emit_binop_r_m(op, reg_a.reg, masm.slotAddr(tos+1));
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
				Register(reg_b) => {
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos, reg_a);
					masm.emit_binop_r_r(op, reg_a.reg, reg_b.reg);
					val_state[tos] = SpcState.Register(reg_a);
					freeReg(reg_b);
					val_stored[tos] = false;
				}
				Const(val_b) => {
					if (nop(val_b)) return;
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos, reg_a);
					masm.emit_binop_r_i(op, reg_a.reg, val_b);
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
			}
			Register(reg_a) => match (b.2) {
				Uncached => {
					masm.emit_binop_r_m(op, reg_a.reg, masm.slotAddr(tos+1));
					val_stored[tos] = false;
				}
				Register(reg_b) => {
					masm.emit_binop_r_r(op, reg_a.reg, reg_b.reg);
					freeReg(reg_b);
					val_stored[tos] = false;
				}
				Const(val_b) => {
					if (nop(val_b)) return;
					masm.emit_binop_r_i(op, reg_a.reg, val_b);
					val_stored[tos] = false;
				}
			}
			Const(val_a) => if (!nop(val_a)) match (b.2) {
				Uncached => {
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos+1, reg_a);
					masm.emit_binop_r_i(op, reg_a.reg, val_a);
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
				Register(reg_b) => {
					var reg_a = allocReg(RegClass.I32);
					masm.emit_mov_r_i(reg_a.reg, val_a);
					masm.emit_binop_r_r(op, reg_a.reg, reg_b.reg);
					freeReg(reg_b);
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
				Const(val_b) => {
					val_state[tos] = SpcState.Const(fold(val_a, val_b)); // constant fold
					val_stored[tos] = false;
				}
			}
		}
	}
	def emitCommutable(op: Opcode, nop: int -> bool, fold: (int, int) -> int) {
		var b = pop();
		var a = peek();
		var tos = u32.!(val_sp - 1);
		match (a.2) {
			Uncached => match (b.2) {
				Uncached => {
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos, reg_a);
					masm.emit_binop_r_m(op, reg_a.reg, masm.slotAddr(tos+1));
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
				Register(reg_b) => {
					masm.emit_binop_r_m(op, reg_b.reg, masm.slotAddr(tos));
					val_stored[tos] = false;
				}
				Const(val_b) => {
					if (nop(val_b)) return;
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos, reg_a);
					masm.emit_binop_r_i(op, reg_a.reg, val_b);
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
			}
			Register(reg_a) => match (b.2) {
				Uncached => {
					masm.emit_binop_r_m(op, reg_a.reg, masm.slotAddr(tos+1));
					val_stored[tos] = false;
				}
				Register(reg_b) => {
					masm.emit_binop_r_r(op, reg_a.reg, reg_b.reg);
					freeReg(reg_b);
					val_stored[tos] = false;
				}
				Const(val_b) => {
					if (nop(val_b)) return;
					masm.emit_binop_r_i(op, reg_a.reg, val_b);
					val_stored[tos] = false;
				}
			}
			Const(val_a) => if (!nop(val_a)) match (b.2) {
				Uncached => {
					var reg_a = allocReg(RegClass.I32);
					emit_read_slot_r(tos+1, reg_a);
					masm.emit_binop_r_i(op, reg_a.reg, val_a);
					val_state[tos] = SpcState.Register(reg_a);
					val_stored[tos] = false;
				}
				Register(reg_b) => {
					masm.emit_binop_r_i(op, reg_b.reg, val_a); // commuted
					val_stored[tos] = false;
				}
				Const(val_b) => {
					val_state[tos] = SpcState.Const(fold(val_a, val_b)); // constant fold
					val_stored[tos] = false;
				}
			}
		}
	}
	def unsupported() {
		success = false; // XXX: add opcode
		codeptr.atl(codeptr.pos, codeptr.pos); // set limit to break out of loop
	}

	//====================================================================
	// codegen operations
	//====================================================================
	def emit_read_slot_r(slot: u32, reg: SpcReg) {
		masm.emit_mov_r_s(reg.reg, reg.regClass, slot);
	}
	def emit_read_tos_r(reg: SpcReg) {
		masm.emit_mov_r_s(reg.reg, reg.regClass, val_sp - 1);
	}
	def emit_write_tag_tos(tag: RegClass);
	def emit_write_slot_r(slot: u32, reg: SpcReg) {
		masm.emit_mov_s_r(slot, reg.reg, reg.regClass);
	}
	def emit_write_slot_i(slot: u32, val: int, tag: RegClass) {	
		masm.emit_mov_s_i(slot, val);
	}
	def emit_store_all(uncache: bool) {
		for (i < val_sp) {
			if (val_stored[i]) continue; // nothing to do
			var t = val_state[i], index = u32.!(i);
			match (t) {
				Uncached => ; // nothing to do
				Register(reg) => {
					emit_write_slot_r(index, reg);
					if (uncache) {
						val_state[i] = SpcState.Uncached;
						freeReg(reg);
					}
				}
				Const(val) => {
					emit_write_slot_i(index, val, val_tag[i]);
				}
			}
			val_stored[i] = true;
		}
	}

	
	//====================================================================
	// register allocation operations
	//====================================================================
	def freeReg(reg: SpcReg) {
		return masm.regSet.pools[reg.regClass.tag].free(reg.reg);
	}
	def allocReg(regClass: RegClass) -> SpcReg {
		var reg = masm.regSet.pools[regClass.tag].alloc(0);
		return SpcReg(reg, regClass);
	}

	//====================================================================
	// abstract stack operations
	//====================================================================
	def push(tag: RegClass, state: SpcState) {
		var sp = val_sp;
		if (sp >= val_state.length) grow(8 + val_state.length * 2);
		val_tagged[sp] = false;
		val_stored[sp] = false;
		val_tag[sp] = tag;
		val_state[sp] = state;
		val_sp = sp + 1;
	}
	def pop() -> (bool, RegClass, SpcState) {
		var sp = val_sp - 1;
		var result = (val_stored[sp], val_tag[sp], val_state[sp]);
		sp--;
		return result;
	}
	def peek() -> (bool, RegClass, SpcState) {
		var sp = val_sp;
		return (val_stored[sp], val_tag[sp], val_state[sp]);
	}
	def grow(nlength: int) {
		val_state = Arrays.grow(val_state, nlength);
		val_tagged = Arrays.grow(val_tagged, nlength);
		val_stored = Arrays.grow(val_stored, nlength);
		val_tag = Arrays.grow(val_tag, nlength);
	}
	def traceOpcode() {
		OUT.put2("  %x(+%d): ", opcode_pos, opcode_pos - start_pos);
		var prev = codeptr.pos;
		codeptr.at(opcode_pos);
		instrTracer.putInstr(OUT, module, codeptr);
		codeptr.at(prev);
		OUT.outln();
	}
	def traceStack() {
		for (i < val_sp) {
			OUT.put3("[%s %s%s: ",
				val_tag[i].name,
				if(val_tagged[i], "T", ""),
				if(val_stored[i], "S", ""));
			match (val_state[i]) {
				Uncached => OUT.puts("uncached");
				Register(reg) => OUT.put1("@%s", masm.regSet.getName(reg.reg));
				Const(val) => OUT.put1("#%d", val);
			}
			OUT.puts("]");
		}
		OUT.outln();
	}
}

// States in which a local slot or operand stack slot could be in.
type SpcState {
	case Uncached;
	case Register(reg: SpcReg);
	case Const(val: int);
}

type SpcReg(reg: Reg, regClass: RegClass) #unboxed { }

def isAlwaysFalse(v: int) -> bool { return false; }
def isZero = int.==(0, _);
def isOne = int.==(1, _);
def isMinusOne = int.==(-1, _);
def to_ii_i(f: (u32, u32) -> u32, a: int, b: int) -> int {
	return int.view(f(u32.view(a), u32.view(b)));
}
def I32_ROTL = to_ii_i(Execute.I32_ROTL, _, _);
def I32_ROTR = to_ii_i(Execute.I32_ROTR, _, _);
