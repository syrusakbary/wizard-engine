// Copyright 2022 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Global state for execution, including the {ExecState}, trap reason, error message, etc.
// probes.
component Execute {
	def probes = ProbeList.new();		// probes on the global interpreter loop
	var limits = Limits.new();		// limits on execution/memory
	var state: ExecState;			// current execution state
	var trap_reason: TrapReason;		// trap reason, if any
	var error_msg: string;			// error message associated with trap
	var handleTrap = defaultTrap;		// how to handle traps

	// Reset internal states.
	def reset() {
		state = ExecState.STOPPED;
		trap_reason = TrapReason.NONE;
		error_msg = null;
		probes.clear();
		Target.reset();
	}
	// Call a given function with the given arguments.
	def call(func: Function, args: Array<Value>) -> Result {
		while (true) {  // host function may tail-call another function
			match (func) {
				wf: WasmFunction => return Target.call(wf, args);
				hf: HostFunction => {
					var result = doInvokeHostFunction(hf, args);
					match (result) {
						Trap(reason) => return trap(reason);
						Error(msg) => {
//TODO							error_msg = msg;
							return trap(TrapReason.ERROR);
						}
						Value0 => return Result.Value(Values.NONE);
						Value1(val) => return Result.Value([val]);
						ValueN(vals) => return Result.Value(vals);
						TailCall(f, a) => {
							func = f;
							args = a;
							continue; // execute a tail call to a new function
						}
					}
				}
				_ => return trap(TrapReason.FUNC_INVALID);
			}
		}
		return Result.Trap(TrapReason.UNREACHABLE);
	}
	def trap(reason: TrapReason) -> Result {
		return Result.Trap(reason); // TODO: invoke onTrap()
	}
	private def MISMATCH = HostResult.Trap(TrapReason.FUNC_SIG_MISMATCH);
	private def doInvokeHostFunction(hf: HostFunction, args: Array<Value>) -> HostResult {
		if (Trace.interpreter) traceCallHostFunction(hf);
		var result: HostResult;
		match (hf) {
			hf0: HostFunction0 => {
				if (args.length != 0) return MISMATCH;
				result = hf0.invoke0();
			}
			hf1: HostFunction1 => {
				if (args.length != 1) return MISMATCH;
				result = hf1.invoke1(args[0]);
			}
			hf2: HostFunction2 => {
				if (args.length != 2) return MISMATCH;
				result = hf2.invoke2(args[0], args[1]);
			}
			hf3: HostFunction3 => {
				if (args.length != 3) return MISMATCH;
				result = hf3.invoke3(args[0], args[1], args[2]);
			}
			hfN: HostFunctionN => {
				if (args.length != hf.sig.params.length) return MISMATCH;
				result = hfN.invokeN(args);
			}
		}
		return result;
	}

	// Traces calls to host functions.
	def traceCallHostFunction(hf: HostFunction) {
		var c = getCallStack();
		for (i < c.top) Trace.OUT.sp();
		Trace.OUT.put2("callHost(\"%q\": %q)", hf.render, hf.sig.render).outln();
	}
	def getTopFrame() -> Frame {
		return Target.getWasmTopFrame();
	}
	def getCallStack() -> ArrayStack<Frame> {
		return Target.getWasmCallStack();
	}
	def getCallDepth() -> int {
		return Target.getWasmCallDepth();
	}
	// Fires probes on the global interpreter loop
	def fireProbes(func: WasmFunction, pc: int) -> bool {
		state = ExecState.PROBING;
		var r = Execute.probes.fire(func, pc);
		return resume(r);
	}
	// Fires probes on a specific instruction
	def fireProbesAt(func: WasmFunction, pc: int) -> bool {
		var probes = func.instance.module.probes;
		if (probes == null) return true;
		var map = probes[func.decl.func_index];
		if (map == null) return true;
		state = ExecState.PROBING;
		var list = map[pc];
		var r = list.fire(func, pc);
		if (list.elem == null) map[pc] = null;
		return resume(r);
	}
	def resume(r: Resumption) -> bool {
		match (r) {
			Continue => {
				state = if(Execute.probes.elem == null, ExecState.RUN_FAST, ExecState.RUN_SLOW);
				return true;
			}
			Trap(reason, trace) => { // TODO: add exception backtrace
				trap_reason = reason;
				state = ExecState.TRAPPED;
				return false;
			}
		}
	}

	def fwBoundCall(f: Function, args1: Array<Value>, args2: Array<Value>) -> HostResult {
		var al = args1.length, args = Array<Value>.new(al + args2.length);
		for (i < al) args[i] = args1[i];
		for (i < args2.length) args[i + al] = args2[i];
		return HostResult.TailCall(f, args);
	}
	def I32_CLZ(x: u32) -> u32 {
		var count = 0u;
		if (x == 0) return 32;
		while ((x & 0x80000000u) == 0) { count++; x <<= 1; }
		return count;
	}
	def I32_CTZ(x: u32) -> u32 {
		var count = 0u;
		if (x == 0) return 32;
		while ((x & 1u) == 0) { count++; x >>= 1; }
		return count;
	}
	def I32_POPCNT(x: u32) -> u32 {
		var count = 0u;
		for (i < 32) {
			if ((x & 1) == 1) count++;
			x >>= 1;
		}
		return count;
	}
	def I32_ROTL(x: u32, z: u32) -> u32 {
		var y = u5.view(z);
		if (y != 0) {
			var upper = x << y;
			var lower = x >> byte.view(32) - y;
			x = upper | lower;
		}
		return x;
	}
	def I32_ROTR(x: u32, z: u32) -> u32 {
		var y = u5.view(z);
		if (y != 0) {
			var upper = x << byte.view(32) - y;
			var lower = x >> y;
			x = upper | lower;
		}
		return x;
	}
	def matchRtt(ref: Value.Ref, rtt: RttObject) -> bool {
		match (ref.val) {
			obj: HeapObject => {
				var drtt = obj.rtt;
				if (drtt == rtt) return true;
				for (d in drtt.supers) if (d == rtt) return true;
			}
			func: WasmFunction => {
				var drtt = Canon.getRtt(func.sig);
				if (drtt == rtt) return true;
				for (d in drtt.supers) if (d == rtt) return true;
			}
		}
		return false;
	}
	def I64_CLZ(x: u64) -> u64 {
		var count = 0u;
		if (x == 0) return 64;
		while ((x & 0x8000000000000000ul) == 0) { count++; x <<= 1; }
		return count;
	}
	def I64_CTZ(x: u64) -> u64 {
		var count = 0u;
		if (x == 0) return 64;
		while ((x & 1u) == 0) { count++; x >>= 1; }
		return count;
	}
	def I64_POPCNT(x: u64) -> u64 {
		var count = 0u;
		for (i < 64) {
			if ((x & 1) == 1) count++;
			x >>= 1;
		}
		return count;
	}
	def I64_ROTL(x: u64, z: u64) -> u64 {
		var y = u6.view(z);
		if (y != 0) {
			var upper = x << y;
			var lower = x >> byte.view(64) - y;
			x = upper | lower;
		}
		return x;
	}
	def I64_ROTR(x: u64, z: u64) -> u64 {
		var y = u6.view(z);
		if (y != 0) {
			var upper = x << byte.view(64) - y;
			var lower = x >> y;
			x = upper | lower;
		}
		return x;
	}
	def I32_SHL(x: i32, y: i32) -> i32 {
		return x << u5.view(y);
	}
	def I32_SHR_S(x: i32, y: i32) -> i32 {
		return x >> u5.view(y);
	}
	def I32_SHR_U(x: i32, y: i32) -> i32 {
		return x >>> u5.view(y);
	}
	def I64_SHL(x: u64, y: u64) -> u64 {
		return x << u6.view(y);
	}
	def I64_SHR_S(x: i64, y: i64) -> i64 {
		return x >> u6.view(y);
	}
	def I64_SHR_U(x: u64, y: u64) -> u64 {
		return x >> u6.view(y);
	}

	def fceil(a: float) -> float {
		return canonf(float.ceil(a));
	}
	def ffloor(a: float) -> float {
		return canonf(float.floor(a));
	}
	def fneg(a: float) -> float {
		return float.view(0x80000000u ^ u32.view(a));
	}
	def ftrunc(a: float) -> float {
		if (a < 0f) {
			if (a > -1f) return -0f;  // handle -0
			return 0f - float.floor(0f - a);
		}
		return canonf(float.floor(a));
	}
	def fmin(a: float, b: float) -> float {
		if (a < b) return a;
		if (a == b) return if(b.sign == 1, b, a); // handle -0
		if (b < a) return b;
		return float.nan;
	}
	def fmax(a: float, b: float) -> float {
		if (a > b) return a;
		if (a == b) return if(b.sign == 0, b, a); // handle -0
		if (b > a) return b;
		return float.nan;
	}
	def fcopysign(a: float, b: float) -> float {
		var aa = 0x7fffffffu & u32.view(a);
		var bb = 0x80000000u & u32.view(b);
		return float.view(aa | bb);
	}
	def canonf(a: float) -> float {
		return if(a == a, a, float.nan);
	}

	def dceil(a: double) -> double {
		return canond(double.ceil(a));
	}
	def dfloor(a: double) -> double {
		return canond(double.floor(a));
	}
	def dneg(a: double) -> double {
		return double.view(0x8000000000000000uL ^ u64.view(a));
	}
	def dtrunc(a: double) -> double {
		if (a < 0d) {
			if (a > -1d) return -0d;  // handle -0
			return 0d - double.floor(0d - a);
		}
		return canond(double.floor(a));
	}
	def dmin(a: double, b: double) -> double {
		if (a < b) return a;
		if (a == b) return if(b.sign == 1, b, a); // handle -0
		if (b < a) return b;
		return double.nan;
	}

	def dmax(a: double, b: double) -> double {
		if (a > b) return a;
		if (a == b) return if(b.sign == 0, b, a); // handle -0
		if (b > a) return b;
		return double.nan;
	}
	def dcopysign(a: double, b: double) -> double {
		var aa = 0x7fffffffffffffffuL & u64.view(a);
		var bb = 0x8000000000000000uL & u64.view(b);
		return double.view(aa | bb);
	}
	def canond(a: double) -> double {
		return if(a == a, a, double.nan);
	}
	def bytesToVals(storage: StorageType, data: Array<byte>, offset: u32, length: u32) -> (bool, Array<Value>) {
		var vals = Array<Value>.new(int.!(length));
		if (offset >= data.length) return (false, null);
		var limit = sizeOfStorage(storage) * length + offset;
		if (limit > data.length) return (false, null);
		var d = DataReader.new(data).reset(data, int.!(offset), int.!(limit));
		match (storage.packing) {
			UNPACKED => {
				match (storage.valtype) {
					I32 => for (i < vals.length) vals[i] = Value.I32(d.read_u32());
					I64 => for (i < vals.length) vals[i] = Value.I64(d.read_u64());
					F32 => for (i < vals.length) vals[i] = Value.F32(d.read_u32());
					F64 => for (i < vals.length) vals[i] = Value.F64(d.read_u64());
					V128 => for (i < vals.length) vals[i] = Value.V128(d.read_u64(), d.read_u64());
					_ => ;
				}
			}
			PACKED_I8 => for (i < vals.length) vals[i] = Value.I32(d.read1());
			PACKED_I16 => for (i < vals.length) vals[i] = Value.I32(d.read1() | (u32.!(d.read1()) << 8));
		}
		return (d.ok, vals);
	}
	def sizeOfStorage(storage: StorageType) -> u64 {
		match (storage.packing) {
			UNPACKED => {
				match (storage.valtype) {
					I32, F32 => return 4;
					I64, F64 => return 8;
					V128 => return 16;
					_ => return 8;
				}
			}
			PACKED_I8 => return 1;
			PACKED_I16 => return 2;
		}
	}
}
// Reasons a WebAssembly execution has trapped.
enum TrapReason {
	NONE,
	UNREACHABLE,
	MEM_OUT_OF_BOUNDS,
	UNALIGNED_ACCESS,
	DIV_BY_ZERO,
	DIV_UNREPRESENTABLE,
	FLOAT_UNREPRESENTABLE,
	FUNC_INVALID,
	FUNC_SIG_MISMATCH,
	DATA_SEGMENT_DROPPED,
	ELEM_SEGMENT_DROPPED,
	TABLE_OUT_OF_BOUNDS,
	STACK_OVERFLOW,
	NULL_DEREF,
	UNIMPLEMENTED,
	ARRAY_INDEX_OOB,
	OOM,
	FAILED_CAST,
	INVALID_OPCODE,
	TIMEOUT,
	BREAK,
	ERROR
}

type Result {
	case Break {}
	case Value(vals: Array<Value>) {}
	case Trap(reason: TrapReason) {}
	def equals(that: Result) -> bool {
		if (this == that) return true;
		if (Result.Value.?(this) && Result.Value.?(that)) {
			var a = Result.Value.!(this).vals;
			var b = Result.Value.!(that).vals;
			if (a == b) return true;
			if (a == null) return false;
			if (b == null) return false;
			if (a.length != b.length) return false;
			for (i < a.length) if (a[i] != b[i]) return false;
			return true;
		}
		return false;
	}
	def render(buf: StringBuilder) -> StringBuilder {
		match (this) {
			Break => buf.puts("break");
			Value(vals) => {
				if (vals == null) {
					buf.puts("<null>");
				} else if (vals.length == 1) {
					vals[0].render(buf);
				} else {
					Values.renderVals(buf, vals);
				}
			}
			Trap(reason) => buf.put1("trap %s", reason.name);
		}
		return buf;
	}
}

// Internal execution states of the interpreter.
enum ExecState {
	STOPPED,	// not yet begun
	RUN_FAST,	// running instructions
	RUN_SLOW,	// running instructions, with per-instruction probe
	FINISHED,	// finished bottom-most invocation
	TRAPPED		// finished with a trap
	TRAPPING,	// handling trap in synchronous handleTrap()
	PROBING,	// executing synchronous probe code
}

// Internal representation of execution frames.
class Frame { // TODO: move to V3Interpreter
	var func: WasmFunction;
	var fp: int;
	var pc: int;
	var xip: int;
}

// The various ways user code can resume from a break, trap, or timeout
type Resumption {
	case Continue;
	case Trap(reason: TrapReason, trace: bool);
}

def defaultBreak() -> Resumption {
	return Resumption.Continue;
}
def defaultTrap(reason: TrapReason) -> Resumption {
	return Resumption.Trap(reason, false);
}
