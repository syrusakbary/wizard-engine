// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Options that can be specified on the command line.
enum TraceOption(ch: byte, help: string) {
	int('i', "interpreter"),
	binparse('b', "binary parser"),
	validation('v', "code validation"),
	test('t', "test framework"),
	spectest('s', "specification tests"),
	operands('o', "interpreter stack contents"),
	memory('m', "memory accesses"),
	canon('c', "type canonicalization"),
	uid('u', "internal unique IDs"),
	compiler('k', "compiler(s)"),
	jawa('j', "jawa system")
}

// Parses and updates trace options based on arguments.
component TraceOptions {
	// Parse command-line argument and update trace flags. Return {true} if the
	// argument was matched as a trace flag.
	def parse(arg: string) -> bool {
		if (Strings.startsWith(arg, "--trace-")) {
			for (opt in TraceOption) {
				if (Strings.endsWithFrom(arg, 8, opt.name)) {
					setOption(opt);
					return true;
				}
			}
			var traceModule = "--trace-module";
			if (Strings.startsWith(arg, traceModule)) {
				var pat: string;
				if (arg.length >= (traceModule.length + 1) && arg[traceModule.length] == '=') {
					pat = Arrays.range(arg, traceModule.length + 1, arg.length);
				}
				Trace.moduleFilter = DeclFilter.new(pat);
				return true;
			}
			var traceCalls = "--trace-calls";
			if (Strings.startsWith(arg, traceCalls)) {
				var pat: string;
				if (arg.length >= (traceCalls.length + 1) && arg[traceCalls.length] == '=') {
					pat = Arrays.range(arg, traceCalls.length + 1, arg.length);
				}
				Trace.callsFilter = DeclFilter.new(pat);
				return true;
			}
		} else if (Strings.equal(arg, "-fatal")) {
			return Trace.fatal = true;
		} else if (Strings.startsWith(arg, "-t")) {
			for (i = 2; i < arg.length; i++) {
				var ch = arg[i];
				for (opt in TraceOption) {
					if (ch == opt.ch) setOption(opt);
				}
			}
			return true;
		}
		return false;
	}
	private def setOption(opt: TraceOption) {
		match (opt) {
			int => Trace.interpreter = true;
			binparse => Trace.binparse = true;
			validation => Trace.validation = true;
			test => Trace.test = true;
			spectest => Trace.spectest = true;
			operands => Trace.operands = true;
			memory => Trace.memory = true;
			canon => { Trace.canon = true; Trace.uid = true; }
			uid => Trace.uid = true;
			compiler => Trace.compiler = true;
			jawa => Trace.jawa = true;
		}
	}
}
