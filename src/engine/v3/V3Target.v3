// Copyright 2021 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Contains target-specific factory functions.
component Target {
	def limit_memory_pages = 4096u;

	def newMemory = V3Memory.new;
	def forceGC() { } // nop
	def reset = V3Interpreter.reset;
	def call = V3Interpreter.run;
	def getWasmTopFrame = V3Interpreter.getTopFrame;
	def getWasmCallStack = V3Interpreter.getCallStack;
	def getWasmCallDepth = V3Interpreter.getCallDepth;
	def setMode(m: EngineMode) -> bool {
		match (m) {
			JIT => return false;
			INT, FAST, DEBUG => {
				// v3 target has only one execution mode; interpreter only
				Execute.mode = Mode.INTERPRETER;
				return true;
			}
		}
	}
	def finishModule(m: Module, err: ErrorGen) {
		// V3 target needs no post-processing for a module.
	}
	def genInterpreterIntoFile(filename: string) -> ErrorBuilder {
		// do nothing.
		return ErrorBuilder.new().puts("interpreter generator: nothing to generate for this target");
	}
}

type TargetCode(v: void) #unboxed { }
type TargetModule(v: void) #unboxed { }
