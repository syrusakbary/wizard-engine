// Copyright 2020 Ben L. Titzer. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Utility for tracking the earliest error that occurs in an input (e.g. byte stream).
class ErrorGen(filename: string) {
	var section: BpSection;		// current section
	var index: int = -1;		// current index into section
	var error_section: BpSection;	// section where error ocurred
	var error_index: int;		// index where error ocurred
	var error_code: WasmError;	// wasm error code
	var error_pos: int = int.max;
	var error_msg: string;
	private var next_error_pos = -1;

	// Returns {true} if no error has been recorded yet.
	def ok() -> bool {
		return error_pos == int.max;
	}
	// Returns {true} if an error has been recorded.
	def error() -> bool {
		return error_pos < int.max;
	}
	// Set an error at the current {next_error_pos} if no error has already been
	// recorded at an earlier position. Return {true} if this error was recorded,
	// {false}, if an earlier error was already recorded.
	def set(msg: string) -> bool {
		var pos = next_error_pos;
		if (pos < 0) System.error("ErrorGenError", "next error position not set");
		next_error_pos = -1;
		if (error_pos <= pos) return false;
		error_pos = pos;
		error_msg = msg;
		return true;
	}
	// Reset any error currently recorded.
	def reset() -> this {
		error_pos = int.max;
		error_msg = null;
		next_error_pos = -1;
	}
	// Set the {next_error_pos} to the absolute position of the given decoder.
	def at(d: DataReader) -> this {
		next_error_pos = d.abspos();
	}
	// Set the {next_error_pos} to the absolute position of the given decoder, plus {pt}.
	def rel(d: DataReader, pt: int) -> this {
		next_error_pos = d.abs_of(pt);
	}
	// Set the {next_error_pos} to the given absolute position.
	def abs(pt: int) -> this {
		next_error_pos = pt;
	}
	// Callback for DataReader errors.
	def onDataReaderError(d: DataReader, abspos: int, msg: string) {
		next_error_pos = abspos;
		set(msg);
	}
	// After recording the location of an error using one of the {at?()} methods,
	// set the full wasm-level error message, including an error code and message.
	def setc(code: WasmError, msg: string) {
		if (set(msg)) {
			error_section = section;
			error_index = index;
			error_code = code;
			error_msg = msg;
		}
	}
	// Set the error position to the given import index.
	def atimport(index: int) -> this {
		section = BpSection.Import;
		next_error_pos = index;
	}

	// --{Binary parser errors}-------------------------------------------
	def MissingCodeSection(func_count: u32) {
		setc(WasmError.FUNC_COUNT_MISMATCH,
			Strings.format1("expected %d function bodies, missing code section", func_count));
	}
	def MissingDataSection(data_count: int) {
		setc(WasmError.DATA_COUNT_MISMATCH,
			Strings.format1("expected %d data segments, missing data section", data_count));
	}
	def DuplicateSection(sect: BpSection) {
		setc(WasmError.DUPLICATE_SECTION,
			Strings.format1("duplicate %q section", BpConstants.renderSectionName(_, sect.code)));
	}
	def InvalidSectionCode(code: byte) {
		setc(WasmError.INVALID_SECTION,
			Strings.format1("invalid section code 0x%x", code));
	}
	def IncompleteSection(kind: byte, read: int, size: u32) {
		setc(WasmError.INCOMPLETE_SECTION,
			Strings.format3("incomplete %q section, expected %d bytes, read %d",
				BpConstants.renderSectionName(_, kind), size, read));
	}
	def OverflowSection(kind: byte, read: int, size: u32) {
		setc(WasmError.OVERFLOW_SECTION,
			Strings.format3("overflow %q section, expected %d bytes, read %d",
				BpConstants.renderSectionName(_, kind), size, read));
	}
	def QuantityExceededMaximum(quantity: string, val: u32, max: u32) {
		setc(WasmError.EXCEEDED_LIMIT,
			Strings.format3("expected maximum of %d %s, got %d", max, quantity, val));
	}
	def TotalExceededMaximum(quantity: string, total: u32, max: u32) {
		setc(WasmError.EXCEEDED_LIMIT,
			Strings.format3("expected maximum of %d total %s, got %d", max, quantity, total));
	}
	def QuantityExceededMaximumI(quantity: string, val: int, max: u32) {
		setc(WasmError.EXCEEDED_LIMIT,
			Strings.format3("expected maximum of %d %s, got %d", max, quantity, val));
	}
	def MaximumLessThanInitial(quantity: string, max: u32, initial: u32) {
		setc(WasmError.EXCEEDED_LIMIT,
			Strings.format3("%s maximum %d less than initial %d", quantity, max, initial));
	}
	def InvalidValueTypecon(code: int) {
		setc(WasmError.INVALID_TYPE,
			Strings.format1("invalid value type %d", code));
	}
	def InvalidRefTypecon(code: int) {
		setc(WasmError.INVALID_TYPE,
			Strings.format1("invalid ref type %d", code));
	}
	def InvalidHeapType(val: int) {
		setc(WasmError.INVALID_TYPE,
			Strings.format1("invalid heap type %d", val));
	}
	def InvalidBlockType(type_index: int) {
		setc(WasmError.INVALID_BLOCK_TYPE,
			Strings.format1("invalid block type %d", type_index));
	}
	def InvalidElemFlags(flags: byte) {
		setc(WasmError.INVALID_ELEM_FLAGS,
			Strings.format1("invalid elem flags 0x%x", flags));
	}
	def InvalidDataFlags(flags: byte) {
		setc(WasmError.INVALID_DATA_FLAGS,
			Strings.format1("invalid data flags 0x%x", flags));
	}
	def InvalidGlobalFlags(flags: byte) {
		setc(WasmError.INVALID_GLOBAL_FLAGS,
			Strings.format1("invalid global flags 0x%x", flags));
	}
	def InvalidTableFlags(flags: byte) {
		setc(WasmError.INVALID_TABLE_FLAGS,
			Strings.format1("invalid global flags 0x%x", flags));
	}
	def InvalidMemoryFlags(flags: byte) {
		setc(WasmError.INVALID_MEMORY_FLAGS,
			Strings.format1("invalid global flags 0x%x", flags));
	}
	def InvalidImportKind(code: byte) {
		setc(WasmError.INVALID_IMPORT_KIND,
			Strings.format1("invalid import kind 0x%x", code));
	}
	def InvalidExportKind(code: byte) {
		setc(WasmError.INVALID_IMPORT_KIND,
			Strings.format1("invalid export kind 0x%x", code));
	}
	def DuplicateExport(export_index: int) {
		setc(WasmError.DUPLICATE_EXPORT,
			Strings.format1("duplicate export %d", export_index));
	}
	def ExpectedMemoryIndexZeroByte(memory_index: byte) {
		setc(WasmError.EXPECTED_ZERO_BYTE,
			Strings.format1("expected zero byte for memory index, got 0x%x", memory_index));
	}
	def ExpectedElemKindZeroByte(elem_kind: byte) {
		setc(WasmError.EXPECTED_ZERO_BYTE,
			Strings.format1("expected zero byte for elem kind, got 0x%x", elem_kind));
	}
	def ExpectedTableIndexZeroByte(table_index: byte) {
		setc(WasmError.EXPECTED_ZERO_BYTE,
			Strings.format1("expected zero byte for table index, got 0x%x", table_index));
	}
	def ExpectedElementsZeroByte(flags: byte) {
		setc(WasmError.EXPECTED_ZERO_BYTE,
			Strings.format1("expected zero byte for elements, got 0x%x", flags));
	}
	def ExpectedDataFlagsZeroByte(flags: byte) {
		setc(WasmError.EXPECTED_ZERO_BYTE,
			Strings.format1("expected zero byte for data, got 0x%x", flags));
	}
	private def safeRender(ht: HeapTypeDecl) -> StringBuilder -> StringBuilder { // XXX: factor out
		if (ht == null) return StringBuilder.puts(_, "<null>");
		return ht.render;
	}
	def ExpectedSignature(ht: HeapTypeDecl) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("expected signature, got %q", safeRender(ht)));
	}
	def ExpectedStructType(ht: HeapTypeDecl) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("expected struct type, got %q", safeRender(ht)));
	}
	def ExpectedArrayType(ht: HeapTypeDecl) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("expected array type, got %q", safeRender(ht)));
	}
	def ExpectedRefType(got: ValueType) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("expected ref type, got %q", got.render));
	}
	def ExpectedConcreteRefType(got: ValueType) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("expected concrete ref type, got %q", got.render));
	}
	def ExpectedDefaultableHeapType(got: ValueType) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("expected defaultable heap type, got %q", got.render));
	}
	def ExpectedImmutableGlobalInInit(g: GlobalDecl) {
		setc(WasmError.INVALID_INIT_EXPR, "expected immutable global in initialization");
	}
	def InvalidUtf8String() {
		setc(WasmError.INVALID_UTF8_STRING, "invalid UTF-8 string");
	}
	def ExpectedSharedMemoryMaximum() {
		setc(WasmError.INVALID_MEMORY_FLAGS, "expected maximum for shared memory");
	}
	def InvalidTypeDeclCode(code: int) {
		setc(WasmError.INVALID_TYPE,
			Strings.format1("expected type decl code, got %d", code));
	}
	def ExpectedI32InitExpr(vt: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format1("expected init expression of type i32, got %q", vt.render));
	}
	def EOFMagicWord() {
		setc(WasmError.INVALID_HEADER, "expected magic word, got EOF");
	}
	def InvalidMagicWord(word: u32) {
		setc(WasmError.INVALID_HEADER,
			Strings.format2("expected magic word 0x%x, got 0x%x", BpConstants.WASM_MAGIC, word));
	}
	def EOFWasmVersion() {
		setc(WasmError.INVALID_HEADER, "expected wasm version, got EOF");
	}
	def InvalidWasmVersion(version: u32) {
		setc(WasmError.INVALID_HEADER,
			Strings.format2("expected wasm version 0x%x, got 0x%x", BpConstants.WASM_VERSION, version));
	}
	def OverflowFunctionBody(read: int, size: u32) {
		setc(WasmError.OVERFLOW_FUNCTION,
			Strings.format2("expected function body of size %d, read %d", size, read));
	}
	def IncompleteFunctionBody(read: int, size: u32) {
		setc(WasmError.INCOMPLETE_FUNCTION_BODY,
			Strings.format2("expected function body of size %d, read %d", size, read));
	}
	def CustomSectionNameLengthTooLong(len: int, size: u32) {
		setc(WasmError.OVERFLOW_SECTION,
			Strings.format2("name length %d exceeds section size of %d", len, size));
	}
	def IllegalTableElementType(code: int) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("illegal table elem type %d", code));
	}
	def ExpectedEndInInit(end: int) {
		setc(WasmError.INVALID_INIT_EXPR,
			Strings.format2("expected end opcode 0x%x in init expression, got 0x%x",
				Opcode.END.code, end));
	}
	def UnexpectedOpcodeInInit(prefix: byte, code: u32) {
		var opcode = Opcodes.find(prefix, code);
		if (opcode != Opcode.NOP) {
			setc(WasmError.INVALID_INIT_EXPR,
				Strings.format3("invalid opcode 0x%x 0x%x (%s) in initializer", opcode.prefix, opcode.code, opcode.mnemonic));
		} else {
			setc(WasmError.INVALID_INIT_EXPR,
				Strings.format2("invalid opcode 0x%x 0x%x in initializer", prefix, code));
		}
	}
	def IllegalStartFunctionType(sig: SigDecl) {
		setc(WasmError.ILLEGAL_TYPE, "expected start function type [] -> []");
	}
	def FuncCountMismatch(expected: u32, count: u32) {
		setc(WasmError.FUNC_COUNT_MISMATCH,
			Strings.format2("expected %d function bodies, got %d", expected, count));
	}
	def DataCountMismatch(expected: int, count: u32) {
		setc(WasmError.DATA_COUNT_MISMATCH,
			Strings.format2("expected %d data segments, got %d", expected, count));
	}
	def TypeMismatchIn(quantity: string, expected: ValueType, got: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format3("expected type %q in %s, got %q",
				expected.render, quantity, got.render));
	}
	def TypeMismatchInElemInit(expected: ValueType, got: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format2("expected type %q in element expression, got %q",
				expected.render, got.render));
	}
	def OobIndex(quantity: string, index: u32, max: u32) {
		setc(WasmError.OOB_INDEX,
			Strings.format3("exceeded %s index maximum %d, got %d", quantity, max, index));
	}
	def InvalidTypeConstraint(code: byte) {
		setc(WasmError.INVALID_TYPE,
			Strings.format1("invalid type constraint kind, expected 0x00, 0x%x", code));
	}
	def IllegalSupertype(decl: HeapTypeDecl, sup: HeapType) {
		var kind = "decl";
		match (decl) {
			x: StructDecl => kind = "struct";
			x: ArrayDecl => kind = "array";
			x: SigDecl => kind = "func";
		}
		setc(WasmError.ILLEGAL_SUPERTYPE,
			Strings.format2("%s type definition cannot have a %q as supertype", kind, ValueTypes.renderHeapType(_, null, false, sup)));
	}
	// --{Code validation errors}-----------------------------------------
	def UnterminatedFunctionBody() {
		setc(WasmError.UNTERMINATED_BODY, "unterminated function body");
	}
	def MismatchedElse() {
		setc(WasmError.MISMATCHED_ELSE, "mismatched else");
	}
	def EmptyControlStack() {
		setc(WasmError.OOB_LABEL, "empty control stack");
	}
	def EmptyValueStack() {
		setc(WasmError.TYPE_MISMATCH, "empty value stack");
	}
	def EmptyValueStackExpecting(e: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format1("empty value stack, expected %q", e.render));
	}
	def InvalidOpcode(prefix: byte, code: u32) {
		var opcode = Opcodes.find(prefix, code);
		if (opcode != Opcode.NOP) {
			setc(WasmError.INVALID_OPCODE,
				Strings.format3("unsupported opcode 0x%x 0x%x (%s)", opcode.prefix, opcode.code, opcode.mnemonic));
		} else {
			setc(WasmError.INVALID_OPCODE,
				Strings.format2("invalid opcode 0x%x 0x%x", prefix, code));
		}
	}
	def OobLabel(depth: u32, max: int) {
		setc(WasmError.OOB_LABEL,
			Strings.format2("exceeded label depth maximum %d, got %d", max, depth));
	}
	def OobLocalIndex(local_index: u32, max: int) {
		setc(WasmError.OOB_INDEX,
			Strings.format2("exceeded local variable maximum %d, got %d", max, local_index));
	}
	def OpcodeRequiresExtension(opcode: Opcode, ext: Extension) {
		var buf = StringBuilder.new();
		if (opcode.prefix != 0) buf.put2("opcode %x %x", opcode.prefix, opcode.code);
		else buf.put1("opcode %x", opcode.code);
		setc(WasmError.INVALID_OPCODE, buf.put2(" (%s) requires \"%s\" extension",
				opcode.mnemonic, ext.short_name).extract());
	}
	def ReturnSigMismatch(i: int, e: ValueType, g: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format3("expected return type [%d] = %q, got %q",
				i, e.render, g.render));
	}
	def ReturnArityMismatch(e: int, g: int) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format2("expected %d return values, got %d", e, g));
	}
	def ExpectedType(e: ValueType, g: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format2("expected type %q, got %q",
				e.render, g.render));
	}
	def ExpectedFunctionTypeT(g: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format1("expected function type, got %q", g.render));
	}
	def ExpectedPackedType(st: StorageType) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("expected packed type, got %q", st.valtype.render));
	}
	def ExpectedUnpackedType(st: StorageType) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("expected unpacked type, got %s", if(st.packing == Packedness.PACKED_I8, "i8", "i16")));
	}
	def ExpectedRtt(got: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format1("expected rtt, got %q", got.render));
	}
	def ExpectedRtt2(expected: HeapTypeDecl, got: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format2("expected %q, got %q", ValueType.Ref(false, HeapType.Rtt(-1, expected)).render, got.render));
	}
	def ElementTypeMismatch(expected: ValueType, got: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format2("expected element type %q, got %q", expected.render, got.render));
	}
	def IllegalAssignmentToImmutableGlobal(global_index: int) {
		setc(WasmError.ILLEGAL_ASSIGNMENT,
			Strings.format1("illegal assignment to immutable global #%d", global_index));
	}
	def IllegalAssignmentToImmutableField(t: ValueType, index: u32) {
		setc(WasmError.ILLEGAL_ASSIGNMENT,
			Strings.format2("illegal assignment to immutable field %q #%d", t.render, index));
	}
	def IllegalAssignmentToImmutableArray(t: ValueType) {
		setc(WasmError.ILLEGAL_ASSIGNMENT,
			Strings.format1("illegal assignment to immutable array %q", t.render));
	}
	def IllegalAlignment(max: u32, g: u32) {
		setc(WasmError.ILLEGAL_ALIGNMENT,
			Strings.format2("expected max alignment %d, got %d", max, g));
	}
	def IllegalLane(max: u32, g: u32) {
		setc(WasmError.ILLEGAL_LANE,
			Strings.format2("expected max lane %d, got %d", max, g));
	}
	def IllegalNonPrimitiveArray(at: ArrayDecl) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("expected primitive array type, got %q", at.render));
	}
	def ArityMismatchAtFallthru(e: int, g: int) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format2("expected %d values for fallthru, got %d", e, g));
	}
	def BrTableArityMismatch(i: int, e: int, g: int) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format3("br_table[0] label expects %d values, br_table[%d] expects %d",
				i, e, g));
	}
	def BrTableTypeMismatch(i: int, j: int, e: ValueType, g: ValueType) {
		var buf = StringBuilder.new();
		buf.put2("br_table[%d][%d] ", i, j);
		buf.put2("type %q cannot be merged with type %q",
			e.render, g.render);
		setc(WasmError.TYPE_MISMATCH, buf.toString());
	}
	def MissingDataCount() {
		setc(WasmError.MISSING_DATA_COUNT,
			"missing data count section");
	}
	def IllegalSelectCount() {
		setc(WasmError.ILLEGAL_SELECT_COUNT,
			"illegal select count of 0");
	}
	def IllegalSelectType(t: ValueType) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format1("illegal select type %q", t.render));
	}
	def IllegalFuncRef(func: FuncDecl) {
		setc(WasmError.ILLEGAL_FUNCREF,
			Strings.format1("illegal ref.func(%d) without prior declaration", func.func_index));
	}
	def ExpectedTypeWithDefaultValue(got: ValueType) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format1("expected type with default value, got %q", got.render));
	}
	def TypeMismatchInFuncBind(expected: SigDecl, got: SigDecl) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format2("expected func sig %q, got %q", expected.render, got.render));
	}
	def ArityMismatchInFuncBind(expected: SigDecl, got: SigDecl) {
		setc(WasmError.TYPE_MISMATCH,
			Strings.format2("expected func sig with higher arity than %q, got %q", expected.render, got.render));
	}
	def ExpectedSubtypeH(ft: HeapTypeDecl, tt: HeapTypeDecl) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format2("expected subtype %q <: %q", ValueTypes.Ref(false, ft).render, ValueTypes.Ref(false, tt).render));
	}
	def ExpectedSubtype(ft: ValueType, tt: ValueType) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format2("expected subtype %q <: %q", ft.render, tt.render));
	}
	def ExpectedRttSuperType(ref: ValueType, rtt: HeapType.Rtt) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format2("type %q is not a supertype of cast result type %q", ref.render, ValueTypes.Ref(false, rtt.hdecl).render));
	}
	def ExpectedRttSubType(ref: ValueType, rtt: HeapType.Rtt) {
		setc(WasmError.ILLEGAL_TYPE,
			Strings.format2("type %q is not a subtype of type %q", ref.render, ValueTypes.Ref(false, rtt.hdecl).render));
	}
	// JIT errors
	def FailedToCompile(index: int) {
		setc(WasmError.JIT_ERROR, Strings.format1("failed to compile function #%d", index));
	}
}

// Wasm errors are enumerated to allow programmatic matching in unit tests.
enum WasmError {
	NONE,
	// General DataReader errors.
	EOF,
	LEB_ERROR,
	// Wasm binary decoding errors.
	INVALID_HEADER,
	INCOMPLETE_SECTION,
	INCOMPLETE_FUNCTION_BODY,
	OVERFLOW_SECTION,
	OVERFLOW_FUNCTION,
	DUPLICATE_SECTION,
	DUPLICATE_EXPORT,
	EXCEEDED_LIMIT,
	OOB_INDEX,
	FUNC_COUNT_MISMATCH,
	DATA_COUNT_MISMATCH,
	INVALID_UTF8_STRING,
	INVALID_SECTION,
	INVALID_TYPE,
	INVALID_IMPORT_KIND,
	INVALID_ELEM_FLAGS,
	INVALID_TABLE_FLAGS,
	INVALID_DATA_FLAGS,
	INVALID_MEMORY_FLAGS,
	INVALID_GLOBAL_FLAGS,
	EXPECTED_ZERO_BYTE,
	EXPECTED_MAXIMUM,
	INVALID_INIT_EXPR,
	ILLEGAL_TYPE,
	ILLEGAL_SUPERTYPE,
	// Code validation errors.
	INVALID_BLOCK_TYPE,
	ILLEGAL_BLOCK_TYPE,
	ILLEGAL_SELECT_COUNT,
	ILLEGAL_ASSIGNMENT,
	ILLEGAL_FUNCREF,
	TYPE_MISMATCH,
	MISMATCHED_ELSE,
	UNTERMINATED_BODY,
	OOB_LABEL,
	ILLEGAL_ALIGNMENT,
	ILLEGAL_LANE,
	INVALID_OPCODE,
	MISSING_DATA_COUNT,
	// Module instantiation errors.
	IMPORT_COUNT_MISMATCH,
	OOM_TABLE,
	OOM_MEMORY,
	IMPORT_KIND_MISMATCH,
	IMPORT_TYPE_MISMATCH,
	OOB_TABLE_ELEMS,
	OOB_DATA_INIT,
	EXPECTED_EXPORT,
	// Engine errors
	JIT_ERROR
}
