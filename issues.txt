Prio	Component	Issue
-------------------------------
        interpreter     implement simd

        gc              tests for binary iso-rec canonicalization
        gc              tests for verifying supertype decls
        spec            why is skip-stack-guard-pages so slow on spec int?

	fast-int	stack traces for wasm traps
        fast-int        implement simd

        host            Add host execution env to outgoing host calls
	ctlxfer		more tests for greater depths
        interpreter     compress ctlxfer entries (1,2,4 byte cases)
	interpreter	print value stack / call stack in tracing mode
        wizeng          expose wizeng module
        wizeng          trace calls
        wizeng          basic profiler
	wizeng		repl for loading and running modules
        wizeng          run start function of modules
	all		version / commit updater
	test		measure and report execution time of individual tests
	test		Improve ease of matching / equality checking in unit tests
	test		add test/regress.sh
	validator	more br tests
	validator	typecheck whole signatures at a time
	spec		is it legal to have 0-count funcs and no code section?
	parse		Tracing of indexes/offsets is all wrong
	parse		Simplify BinParser state machine
	util		Improve objdump utility
	util		Dump module into text format
        wasi            Implement x86-64-linux wasi

	jawa		Class initializers <clinit>
	jawa:gc		covariant array types
	jawa:gc		get to JawaGcRuntime object
	jawa:host	array store exception
	jawa:sys	System.arraycopy
	jawa:test	interface dispatch with multiple interfaces
	jawa		exceptions
	jawa		string methods
	jawa		Math.pow
	jawa		Math.exp(1) special case
	jawa		Object.clone
	jawa		narrowing stores

	ext		tail-call
	ext		multi-memory
	ext		gc
	ext		function-references
	ext		exception-handling
	ext		memory64
	ext		threads

        test            all ext:gc instructions
        validate        move init expr validation into CodeValidator
        bin             reorganize BinParser, BpFsm, and WasmParser

        objdump         Test objdump utility with canned modules
        v3-int          Implement and use NativeMemory
        v3-int          Implement and use NativeValueStack
	fast-int	tune: register assignment
	fast-int	tune: handler order, alignment
	fast-int	tune: inline some extended LEB cases?
	fast-int	experiment: 2-byte dispatch table and specialization
        fast-int	look up tag for abstypes

Test Coverage
--------------------------------
Interpreter
	doCallHost of null host function
	doCallFunction of host function	
	pushFrame of EXTERNREF, FUNCREF, RefNullFunc locals
	traceCallHostFunction deeper than 0
	loop unbounded

Memory
	.new with OOM
	.read/write OOB for all elem sizes
	.copyD of null
	.size of null

SpecTestParser
	.parseCommand error
	.parseList boundary conditions
	.parseOneCommandForTesting boundary conditions
	.parseExpectedValue i64, f32, f64, refnull, refextern

BinParser
	invalid section code
	render invalid type con
	.readElemFuncIndexes of FUNCREF, FuncRef, ExternRef
	.readValueType of VEC128
	.readDataIndex max > explicit_data_count
	invalid import/export kind
	renderLimitFlags of shared
	readMemoryArg of full memory index
	readLabels exceeding maximum
	custom section name length too long
	readDataDecl with different flags settings
	readInitExpr readRefNull type
	readMemoryLimits expecting shared memory maximum
	decodeFunctionBody func count mismatch
	decodeFunctionBody with code validation
	readBlockType of double, vec128
	readBlockType with function types
	readRefType of function types
	readElemDecl

Values
	.f64 of underflow exponent
	.render of host function

ValueType
	.render of vec 128

Arrays
	.boundsCheck of null
	.map of null

Instantiator
	check data bounds of null memory
	check limits of Max.None
	check elem bounds of expressions
	checkBounds fails

Instance
	evalInitExpr of f32, f64, FUNCREF, EXTERNREF, global

HashMap<JawString>
	cache hit
	balance

JawaImportProcessor
	read_jtref of invalid primitive code, non Jawa type
	processCommand 0 length
	processCommand not a class/interface type

JawaClassType
	.isAssignableToI
	.isAssignableTo EXTERNREF

CodeValidator
	.checkArgs of null
	.readLocals exceeds maximum
	.mergeTypesAt, invalid block type
	checkAlignment (loads/stores)
	table.init: element type mismatch

CtlXferTest
	0 entries

Result
	.equals of mismatched sizes

Opcodes
	.renderInstr of not found prefix
	.readBlockType .readValueType PARAM_INDEX
	.find with 0 prefix
Max
	.check of None
	.min of None

Utf8
	.findError of null

Strings
	.equals of null

StringBuilder
	.putx of u16

Stack
	.pop of empty stack
	.pushA with grow
	.resize

Decoder
	.read_x64leb with EOF
	.read_u64 with EOF
	.skip_bytes with EOF
	.check_bytes with EOF

JawaHostStubs
	.eval_ANEWARRAY with negative array size

Module
	.addDef of AbsTypeDecl
	.addDef of EventDecl

AbsTypeDecl
	.render of imported

BinBuilder
	.put_ValueType

ElemDetails
	.length of exprs

HostType
	.isAssignableTo

JawaArrayObjectOf<T>
	.jawaType

FunctionTable
	.copyT ValueTable, FunctionTable
	.copyE FunctionTable

ValueTypes
	.bound

Done
--------------------------------
        interpreter     -trace-interpreter should use global probe
        func-refs       no subtyping for function references without gc proposal
        gc              new array opcodes
	fast-int	scan value stack for GC
        interpreter     rename Xcode to sidetable
        fast-int        support main loop probe
        fast-int        support extended LEB secondary opcodes
        gc              Refactor type comparison for iso-recursion
        validate        implement simd
        opcodes         add simd
        fast-int        tagless interpreter
	fast-int	support instruction probes
        interpreter     reimplement break support using probes
        interpreter     reimplement timeout support using probes
	interpreter	support probes
	fast-int	Implement tail calls
        fast-int        Implement BREAK opcode
	fast-int	save VSP into ValueStack for runtime calls
        fast-int        Direct calls to runtime functions
        fast-int        Include descriptions of interpreter frames in fatal errors
        wizeng          trace imports/modules
	fast-int	scan interpreter frames for GC
        trace           Unify all tracing patterns as if(Trace.foo)
	build		sense host platform
	fast-int	skip tag for ref<T> types
        fast-int        allocate binary space for interpreter code
	fast-int	gen code into global array
        fast-int        4 byte entries in dispatch table
	interpreter	factor context out of v3 int and fast int
	test		support TEST_TARGET= for all tests
	fast-int	refactor codegen to eliminate looping over bytecodes
	runtime		Fast native memories (pointer, memmap)
	jawa:gc		instanceof for interfaces
	jawa		tail calls for invoke
	binary		Parse names section
	trace		Reuse opcode renderer across calls
	unit		Improve overall unit testing framework
	validator	bug: Unreachable in one-armed if-value
	wave		implementation to bootstrap Virgil
	instance	Write unit tests for instantiation
	interpreter	test host functions
	interpreter	multivalue blocks, loops
	ext		bulk_memory
	ext		reference_types
	ext		sign_extension
	ext		tail_call: interpreter
	ext		multiple_memories
	ext		non_trapping_fic
	spec		floating point opcodes
	interpreter	floating point
	ext		tail_call: opcodes and validation
	spec		spectest includes 0xFFFE and 0xFFFF special characters
	binparse	offsets for errors incorrectly buffer relative
	binparse	reduce type specialization of readMultiple<T>
	validator	check for mutability of global in write
	spec		subnormal floats
	spec		br_table popcount bug
	spec		br_table merging of types
	spec		binary LEB 5-byte limit
	spec		elements bugs
	spec		duplicate export name
	spec		invalid memory flags
	spec		parse unicode escapes in strings
	spec		assign to immutable global
	spec		invalid global flags
	spec		assert_trap of module: start function
	spec		UTF-8 encoding
	spec		br_if bugs
	util		use "def var" Virgil feature for .length
	spec		support _ in literals
	binparse	tests for streaming
	config		properly check config settings for decoding and running
	instance	move oom logic into instantiator, out of constructors
	trace		Always use StringBuffer.out(STDOUT)
	validator	multivalue blocks, loops
	test		spec test loader and runner
	interpreter	memory index decoding
	core		introduce Extension enum
	binparse	double check memory operand decoding
	validator	check alignment of memory operators
	interpreter	convert unit tests to params, results order
	binparse	write tests for binary decoding
